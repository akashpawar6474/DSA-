# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        """
        this is very simple problem
        with two pointer on two diff lists
        tc = O(n + m)
        sc = O(n + m) for creating new list
        """
        carry = 0
        dummyHead = ListNode()
        curr = dummyHead
        
        while l1 or l2:
            currTotal = 0
            if l1:
                currTotal += l1.val
                l1 = l1.next
            if l2:
                currTotal += l2.val
                l2 = l2.next
            if carry:
                currTotal += carry
            
            carry = currTotal // 10
            currTotal = currTotal % 10
            
            currNode = ListNode(currTotal)
            curr.next = currNode
            curr = curr.next
        
        if carry:
            newNode = ListNode(carry)
            curr.next = newNode
        return dummyHead.next
------------------------------------------------------------- 10 March 2022
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        dummy = ListNode()
        curr = dummy
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            if l2:
                carry += l2.val
                l2 = l2.next
            lastDigit = carry % 10
            carry = carry // 10
            curr.next = ListNode(lastDigit)
            curr = curr.next
        return dummy.next
   ------------------------------------------------------------- 16 March 2022 WITHOUT DUMMY NODE
   class Solution:
	# @param A : head node of linked list
	# @param B : head node of linked list
	# @return the head node in the linked list
	def addTwoNumbers(self, A, B):
        carry = 0
        ansList = None
        curr = None
        while A or B or carry:
            if A:
                carry += A.val
                A = A.next
            if B:
                carry += B.val
                B = B.next
            lastDigit = carry % 10
            carry = carry // 10
            if ansList is None:
                ansList = ListNode(lastDigit)
                curr = ansList
            else:
                curr.next = ListNode(lastDigit)
                curr = curr.next
        return ansList
