# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        """
        Idea is very simple
        as it is bst then do inorder traversal which will generate
        sorted arrays 
        then just merge them
        
        tc = O(2n) => no of nodes in both trees
        sc = O(n) => if tree is skeweed
        """
        def inorder(root,order):
            if root is None:
                return
            inorder(root.left,order)
            order.append(root.val)
            inorder(root.right,order)
            
        def merge(arr1,arr2):
            i = 0
            j = 0
            n = len(arr1)
            m = len(arr2)
            ans = []
            while i < n and j < m:
                if arr1[i] < arr2[j]:
                    ans.append(arr1[i])
                    i += 1
                else:
                    ans.append(arr2[j])
                    j += 1
            
            while i < n:
                ans.append(arr1[i])
                i += 1
            
            while j < m:
                ans.append(arr2[j])
                j += 1
            return ans
        
        inorderOfTree1 = []
        inorder(root1,inorderOfTree1)
        inorderOfTree2 = []
        inorder(root2,inorderOfTree2)
        
        return merge(inorderOfTree1,inorderOfTree2)
        
