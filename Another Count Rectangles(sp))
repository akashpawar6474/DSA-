Problem Description

Given a sorted array of distinct integers A and an integer B, find and return how many rectangles with distinct configurations can be created using elements of this array as length and breadth whose area is lesser than B.

(Note that a rectangle of 2 x 3 is different from 3 x 2 if we take configuration into view)



Problem Constraints

1 <= |A| <= 100000
1 <= A[i] <= 109
1 <= B <= 109



Input Format

The first argument given is the integer array A.

The second argument given is integer B.



Output Format

Return the number of rectangles with distinct configurations with area less than B modulo (109 + 7).



Example Input

Input 1:

 A = [1, 2]
 B = 5
Input 2:

 A = [1, 2]
 B = 1


Example Output

Output 1:

 4
Output 2:

 0


Example Explanation

Explanation 1:

 All 1X1, 2X2, 1X2 and 2X1 have area less than 5.
Explanation 2:

 No Rectangle is valid.
 --------------------------------------------
 class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        """
        we can have two pointers 
        at 0th and 1st idx
        then if A[left] * A[right] < B:
            inc count by 2
            increment right by 1
        elif A[left] * A[right] > B:
            if we inc left
            then multiplication will always gt by
        so this will not work

        so take left and right pointers at start and end idx
        if A[left] * A[right] < B:
            inc count by 2
            inc left by 1
        else:
            dec right by 1

        and at last each configuraion can make pair with itself

        so count no which square is less than B

        A[left] * A[right] < B;
        then we can say that ele bw left and right
        can also make pair with left

        so no of ele in window including right = right - left
        noOfPairsWithLeft = no of ele in window * 2
        """
        mod = 10 ** 9 + 7
        ans = 0
        left = 0
        right = len(A) - 1
        while left < right:
            if A[left] * A[right] < B:
                noOfEleInWindow = right - left
                ans += (noOfEleInWindow * 2) % mod
                left += 1
            else:
                right -= 1
        
        for i in range(len(A)):
            if A[i] * A[i] < B:
                ans = (ans + 1) % mod
        return ans % mod
