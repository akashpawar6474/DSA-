# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:      
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        """
        Iterative solution is also simple
        take curr ptr at root
        then take infinite loop
            push curr to stack if not none
            and go towards left
            if none and stack is not empth
                then pop the top
                process it
                assing top.right to curr
            else
                we are done wtih traversal so break
        tc = O(n)
        sc = O(n) in case tree is skeweed
        """
        st = []
        curr = root
        ans = []
        while True:
            if curr:
                st.append(curr)
                curr = curr.left
            elif st:
                top = st.pop()
                ans.append(top.val)
                curr = top.right
            else:
                break
        return ans
    def recursiveSolution(self,root):
        """
        tc = O(n)
        sc = O(n)
        """
        def recursive(root,ans):
            if root is None:
                return
            recursive(root.left,ans)
            ans.append(root.val)
            recursive(root.right,ans)
        
        ans = []
        recursive(root,ans)
        return ans
------------------------------------------------------------30 march 2022
# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @return a list of integers
	def inorderTraversal(self, A):
        st = []
        if A is None:
            return []
        curr = A 
        ans = []
        while True:
            if curr:
                st.append(curr)
                curr = curr.left
            elif st:
                top = st.pop()
                ans.append(top.val)
                curr = top.right
            else:
                break
        return ans
-------------------------------------------------------------- 8 april 2022
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        """
        Now we will try morris order traversal
        """
        if root is None:
            return []
        ans = []
        curr = root
        while curr:
            if curr.left is None:
                ans.append(curr.val)
                curr = curr.right
            else:
                inorderPrefix = curr.left
                while inorderPrefix.right is not None and inorderPrefix.right != curr:
                    inorderPrefix = inorderPrefix.right
                if inorderPrefix.right is None:
                    inorderPrefix.right = curr
                    curr = curr.left
                else:
                    inorderPrefix.right = None
                    ans.append(curr.val)
                    curr = curr.right
        return ans
