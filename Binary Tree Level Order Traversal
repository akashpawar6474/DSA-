# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        """
        use queue and do level order traversal
        tc = O(n)
        sc = O((2 ^ lastLevel) - 2) = max no of nodes in last level
        """
        if root is None:
            return []
        from collections import deque
        q = deque()
        q.append(root)
        ans = []
        while q:
            size = len(q)
            currLevel = []
            for i in range(size):
                front = q.popleft()
                currLevel.append(front.val)
                if front.left:
                    q.append(front.left)
                if front.right:
                    q.append(front.right)
            ans.append(currLevel)
        return ans
-----------------------------------------------------------1 april 2022
# Definition for a  binary tree node
# class TreeNode:
#	def __init__(self, x):
#		self.val = x
#		self.left = None
#		self.right = None

class Solution:
	# @param A : root node of tree
	# @return a list of list of integers
	def levelOrder(self, A):
        from collections import deque
        q = deque()
        q.append(A)
        ans = []
        while q:
            currLevel = []
            size = len(q)
            for i in range(size):
                top = q.popleft()
                currLevel.append(top.val)
                if top.left:
                    q.append(top.left)
                if top.right:
                    q.append(top.right)
            ans.append(currLevel)
        return ans
