class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        """
        this looks like standard backtracking problem
        our backtracking fn has two variables curr path and curr Idx
        and our edge case is when len of curr path is equal to k
        then attach copy of curr path to answer
        
        and our currIdx will graze over range of 1 to 4
        for eg. n = 3 k = 2
        means our range will be 1 to 2
                                                     fn(0,[])
                                     /                    |                  \         
                              /CI = 0\                  /CI = 1\          /CI = 2\
                            add 1  pop 1                add 2   pop 2     add 3   pop 3
                          fn(1,[1])                     fn(2,[2])          fn(2,[3])
                        /    \      /      \             /    \
                      add 2  pop 2  add 3  pop 3       add 3 pop 3
                      fn(2,[1,2])   fn(3,[1,3])     fn(3,[2,3])
                      copy to ans                   copy to ans
                      /     \
                     add 3   pop 3
                     fn(3,[1,2,3])
        tc = O(2 ^ n)
        sc = O(2 ^ n)
        because at each no in range of 1 to n has two choices
        wheather to get included or excluded
        """
        def backtrack(currIdx,currPath,ans,k,n):
            if len(currPath) == k:
                ans.append(currPath[:])
            for i in range(currIdx,n + 1):
                currPath.append(i)
                backtrack(i + 1,currPath,ans,k,n)
                currPath.pop()
        currIdx = 1
        currPath = []
        ans = []
        backtrack(currIdx,currPath,ans,k,n)
        return ans
