Problem Description

Given an array A of length N. You have to answer Q queires.

Each query will contain 4 integers l1, r1, l2 and r2. If sorted segment from [l1, r1] is same as sorted segment from [l2 r2] then answer is 1 else 0.

NOTE The queries are 0-indexed.



Problem Constraints

0 <= A[i] <= 100000
1 <= N <= 100000
1 <= Q <= 100000



Input Format

First argument is an array A.
Second will be 2-D array B denoting queries with dimension Q * 4.
Consider ith query as l1 = B[i][0], r1 = B[i][1], l2 = A[i][2], r2 = B[i][3].



Output Format

Return an array of length Q with answer of the queries in the same order in input.



Example Input

Input 1:

 A = [1, 7, 11, 8, 11, 7, 1]
 B = [ 
       [0, 2, 4, 6]
     ]
Input 2:

 A = [1, 3, 2]
 B = [
       [0, 1, 1, 2]
     ] 


Example Output

Output 1:

 [1]
Output 2:

 [0]


Example Explanation

Explanation 1:

 (0, 2) -> [1, 7, 11]
 (4, 6) -> [11, 7, 1]
 Both are same when sorted hence 1.
Explanation 2:

 (0, 1) -> [1, 3]
 (1, 2) -> [3, 2] 
 Both are different when sorted hence -1.
 ------------------------------------------------------
 class Solution:
	# @param A : list of integers
	# @param B : list of list of integers
	# @return a list of integers
	def solve(self, A, B):
        """
        get all unique elements 
        for each unique ele get random no
        """
        import random
        def collectUniqueElements(A):
            ht = {}
            for no in A:
                if no not in ht:
                    ht[no] = 0
            return ht
        
        def genrateRandomNoforEachElement(ht):
            for key,val in ht.items():
                ht[key] = random.randint(0,10 ** 13)
            
        def populateOriginalArrayWithNewValues(A,ht):
            n = len(A)
            for currIdx in range(n):
                A[currIdx] = ht[A[currIdx]]
            
        def generatePrefixArray(A):
            n = len(A)
            for currIdx in range(1,n):
                A[currIdx] = A[currIdx] + A[currIdx - 1]

        def getRangeSum(A,left,right):
            if left == 0:
                return A[right]
            return A[right] - A[left - 1]
        
        ht = collectUniqueElements(A)
        genrateRandomNoforEachElement(ht)
        populateOriginalArrayWithNewValues(A,ht)
        generatePrefixArray(A)

        ans = []
        for query in B:
            firstWindowSum = getRangeSum(A,query[0],query[1])
            secondWindowSum = getRangeSum(A,query[2],query[3])
            if firstWindowSum == secondWindowSum:
                ans.append(1)
            else:
                ans.append(0)
        return ans


    def bruteForce(self,A,B):
        """
        idea is for each query 
        take l1 r1 
        graze over this range and prepare map
        then graze over range of l2 to r2
        try to nullify the freq table if 
            len of table gets 0
            then both arrays can be same 
         [1, 7, 11, 8, 11, 7, 1]
         l1 = 0
         r1= 2
         l2 = 4 
         r2 = 6
         Q.how can we check if subarrays are equal?
         =>1.either we can sort them and compare them => O(nlogn + n)
         2.use hasing which will take O(n) time and space

         can we do better than linear time?
         any logn or constant time

         is there any preprocessing we should do?

        """
        def prepareMap(left,right,A):
            ht = {}
            for i in range(left,right + 1):
                if A[i] not in ht:
                    ht[A[i]] = 0
                ht[A[i]] += 1
            return ht
        
        def isMatch(left,right,A,ht):
            for i in range(left,right + 1):
                if A[i] in ht:
                    ht[A[i]] -= 1
                    if ht[A[i]] == 0:
                        del ht[A[i]]
            return len(ht) == 0

        ans = []
        for query in B:
            ht = prepareMap(query[0],query[1],A)
            if isMatch(query[2],query[3],A,ht):
                ans.append(1)
            else:
                ans.append(0)
        return ans
