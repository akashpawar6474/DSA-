Problem Description

Groot has a profound love for palindrome which is why he keeps fooling around with strings.
A palindrome string is one that reads the same backward as well as forward.

Given a string A of size N consisting of lowercase alphabets, he wants to know if it is possible to make the given string a palindrome by changing exactly one of its character.



Problem Constraints

1 <= N <= 105



Input Format

First and only argument is a string A.



Output Format

Return the string YES if it is possible to make the given string a palindrome by changing exactly 1 character. Else, it should return the string NO.



Example Input

Input 1:

 A = "abbba"
Input 2:

 A = "adaddb"


Example Output

Output 1:

 "YES"
Output 2:

 "NO"


Example Explanation

Explanation 1:

 We can change the character at index 3(1-based) to any other character. The string will be palindromic.
Explanation 2:

 To make the string palindromic we need to change 2 characters. 
 ---------------------------------------------------------------
 class Solution:
    # @param A : string
    # @return a strings
    def solve(self, A):
        """
        aaa 1 odd freq
        ab  2 odd freq but we can make it palindrome
        adaddb 2 odd freq

        idea is to take start and end
        if mismatch goes beyond 1 then return false

        abba and mismatch is 0
        then return NO
        """
        start = 0
        end = len(A) - 1
        misMatches = 0
        n = len(A)
        while start < end:
            if A[start] != A[end]:
                misMatches += 1
            start += 1
            end -= 1
        if n & 1 == 0 and misMatches == 0:
            return "NO"
        return "YES" if misMatches <= 1 else "NO"
