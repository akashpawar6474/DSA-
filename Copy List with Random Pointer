"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        """
        Optimal approach is elementary in algorithmic terms
        steps => 
            create new node and attach it to next of curr node
            copy random ptrs
            extract copied list
        tc = O(3n) = O(n)
        sc = constant
        """
        def createIntermediateNodes(originalPtr,originalNextPtr):
            while originalPtr:
                originalNextPtr = originalPtr.next
                newNode = Node(originalPtr.val)
                originalPtr.next = newNode
                newNode.next = originalNextPtr
                originalPtr = originalNextPtr
                
        def copyRandomPtrs(originalPtr):
            while originalPtr:
                if originalPtr.random:
                    originalPtr.next.random = originalPtr.random.next
                originalPtr = originalPtr.next.next
                
        def extractCopyList(dummyHead,originalPtr):
            copyPtr = dummyHead
            while originalPtr:
                originalNextPtr = originalPtr.next.next
                copyPtr.next = originalPtr.next
                copyPtr = copyPtr.next
                originalPtr.next = originalNextPtr
                originalPtr = originalNextPtr
            return dummyHead.next
                
        if head is None:
            return None

        
        #Phase 1
        originalPtr = head
        originalNextPtr = None
        createIntermediateNodes(originalPtr,originalNextPtr)
        
        #Phase2
        originalPtr = head
        copyRandomPtrs(originalPtr)

        #Phase 3
        dummyHead = Node(0)
        originalPtr = head
        return extractCopyList(dummyHead,originalPtr)
            
            
    def bruteForce(self,head):
        """
        Brute force is create mapping of 
        old and new nodes
        then again graze over old nodes
        and connect random ptr of new nodes
        
        tc = O(2n)
        sc = O(n)
        """
        ht = {}
        curr = head
        while curr:
            newNode = Node(curr.val)
            ht[curr] = newNode
            curr = curr.next
        
        curr = head
        while curr is not None:
            oldNode = curr
            newNode = ht[curr]
            if oldNode.next:
                nextOfNewNode = ht[oldNode.next]
                newNode.next = nextOfNewNode
            if oldNode.random:
                randomOfNewNode = ht[oldNode.random]
                newNode.random = randomOfNewNode
            curr = curr.next
            
        return ht[head] if head else None
        
       --------------------------------------------------- 12 March 2022

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        """
        Brute force is to use extraa space and create hashmap of old and new nodes
        Another way is to create dup list in the mid of original list
        then update random ptrs
        then extract duplicate list
        """
        if head is None:
            return None
        travInOriginal = head
        while travInOriginal:
            nextOfTravInOriginal = travInOriginal.next
            newNode = Node(travInOriginal.val)
            newNode.next = nextOfTravInOriginal
            travInOriginal.next = newNode
            travInOriginal = nextOfTravInOriginal
        
        travInOriginal = head
        while travInOriginal:
            if travInOriginal.random is not None:
                travInOriginal.next.random = travInOriginal.random.next
            travInOriginal = travInOriginal.next.next
        
        dummyHead = Node(-1)
        curr = dummyHead
        travInOriginal = head
        while travInOriginal:
            nextOfTravInOriginal = travInOriginal.next.next
            curr.next = travInOriginal.next
            curr = curr.next
            travInOriginal.next = nextOfTravInOriginal
            travInOriginal = travInOriginal.next
        
        return dummyHead.next
------------------------------------------------------------------------------------- 16 March 2022
class Solution:
    # @param head, a RandomListNode
    # @return a RandomListNode
    def copyRandomList(self, head):
        """
        step1 = create copy list
        step2 = arrange random ptrs
        step3 = extract new list
        """
        travInOriginal = head
        while travInOriginal:
            nextOfTravInOriginal = travInOriginal.next
            newNode = RandomListNode(travInOriginal.label)
            travInOriginal.next = newNode
            newNode.next = nextOfTravInOriginal
            travInOriginal = nextOfTravInOriginal
        
        travInOriginal = head
        while travInOriginal:
            if travInOriginal.random:
                travInOriginal.next.random = travInOriginal.random.next
            travInOriginal = travInOriginal.next.next
        
        dummyHead = RandomListNode(-1)
        curr = dummyHead
        travInOriginal = head
        while travInOriginal:
            nextOfTravInOriginal = travInOriginal.next.next
            curr.next = travInOriginal.next
            curr = curr.next
            travInOriginal.next = nextOfTravInOriginal
            travInOriginal = nextOfTravInOriginal
        
        return dummyHead.next
        
