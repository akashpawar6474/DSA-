class Solution:
    def countOrders(self, n: int) -> int:
        """
        assume n == 3
        and we have sequence (p1,d1,p2,d2,p3,d3)
        
        now say we have p1 ..p2 ..p3
        in how many position we can put d3
        only 1 position after p3
        so now we have p1 ..p2 ..p3 ..d3
        In how many position we can put d2
        we can put d2 after d3,bw p3 and d3 ,bw p2 and p3 
        there are 3 position
        
        now sequence becomes p1 p2 d2 p3 d3
        for this sequence we can put d1 at 5 positions
        
        and above p1 p2 p3 
        sequnce can has 3! arrangements
        so 3! * (1 * 3 * 5)
        
        so total count is n! * (1* 3 * 5 * (2 * n - 1))
        """
        res = 1
        mod = 10 ** 9 + 7
        for i in range(1,n + 1):
            res *= (i) * (2 * i - 1)
            res = res % mod
        return res
    def firstTry(self,n):
        """
        lets start with examples to get some insights
        n = 1
        so all possible options are (p1,d1)
        count = 1
        
        n = 2
        so all possible options are
        (p1,p2,d1,d2)
        (p1,p2,d2,d1)
        (p1,p2,d1,d2) --duplicate
        (p1,p2,d2,d1) --duplicante
        (p2,p1,d1,d2)
        (p2,p1,d2,d1)
        (p2,p1,d1,d2) --duplicate
        (p2,p1,d2,d1) --duplicate
        
        
        (p1,d1,p2,d2)
        (p2,d2,p1,d1)
        one main thing is they are not asking us to generate all permutations
        is it any mathematical formula?
        
        if we start generating it one by one
        then it might end up crashing implicit stack
        
        so only remaining thing is to get count using any formula
        for n no we can arrange them in n! order
        
        but here our n is 2 * given n
        if we dr
        """
