class Solution:
    def __init__(self):
        self.invCount = 0
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        def mergeSort(A):
            n = len(A)
            if n <= 1:
                return A
            start = 0
            end = n - 1
            mid = (start + end) // 2
            left = mergeSort(A[:mid + 1])
            right = mergeSort(A[mid + 1:])
            return merge(left,right)
        
        def countPairs(left,right):
            n = len(left)
            m = len(right)
            j = 0
            for i in range(n):
                while j < m and left[i] > right[j]:
                    j += 1
                self.invCount = (self.invCount + j) % (10 ** 9 + 7)


        def merge(left,right):
            countPairs(left,right)
            n = len(left)
            m = len(right)
            p1 = 0
            p2 = 0
            sortedArr = []
            while p1 < n and p2 < m:
                if left[p1] < right[p2]:
                    sortedArr.append(left[p1])
                    p1 += 1
                else:
                    sortedArr.append(right[p2])
                    p2 += 1
            
            while p1 < n:
                sortedArr.append(left[p1])
                p1 += 1
            while p2 < m:
                sortedArr.append(right[p2])
                p2 += 1
            return sortedArr
        
        mergeSort(A)
        return self.invCount % (10 ** 9 + 7)

