Problem Description

Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2D Cartesian plane.

Find and return the number of unordered triplets (i, j, k) such that (A[i], B[i]), (A[j], B[j]) and (A[k], B[k]) form a right angled triangle with the triangle having one side parallel to the x-axis and one side parallel to the y-axis.

NOTE: The answer may be large so return the answer modulo (109 + 7).



Problem Constraints

1 <= N <= 105

0 <= A[i], B[i] <= 109



Input Format

The first argument given is an integer array A.
The second argument given is the integer array B.



Output Format

Return the number of unordered triplets that form a right angled triangle modulo (109 + 7).



Example Input

Input 1:

 A = [1, 1, 2]
 B = [1, 2, 1]
Input 2:

 A = [1, 1, 2, 3, 3]
 B = [1, 2, 1, 2, 1]


Example Output

Output 1:

 1
Output 2:

 6


Example Explanation

Explanation 1:

 All three points make a right angled triangle. So return 1.
Explanation 2:

 6 quadruplets which make a right angled triangle are: (1, 1), (1, 2), (2, 2)
                                                       (1, 1), (3, 1), (1, 2)
                                                       (1, 1), (3, 1), (3, 2)
                                                       (2, 1), (3, 1), (3, 2)
                                                       (1, 1), (1, 2), (3, 2)
                                                       (1, 2), (3, 1), (3, 2)
------------------------------------------------------------------------------------------
class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def solve(self, A, B):
        """
        to count all right angle triangles

        we can count no of right angle are generated by each point

                3,6

                3,3

                3,1     4,1     7,1

        this 5 coordinates will make 4 right angle triangles
        where right angle will reside at point 3,1

        no of traingle on any point = no of points with same x axis value *
                                      no of points with same y axis value
        tc = O(2n) => O(n)
        sc = O(n) n = no of points
        """
        def prepareXandYPointsMap(A,B):
            xMap = {}
            yMap = {}
            points = len(A)
            for currPointIdx in range(points):
                if A[currPointIdx] not in xMap:
                    xMap[A[currPointIdx]] = 0
                xMap[A[currPointIdx]] += 1
                if B[currPointIdx] not in yMap:
                    yMap[B[currPointIdx]] = 0
                yMap[B[currPointIdx]] += 1
            return xMap,yMap
        
        xMap,yMap = prepareXandYPointsMap(A,B)
        count = 0
        points = len(A)
        for currPointIdx in range(points):
            x = A[currPointIdx]
            y = B[currPointIdx]
            pointsWithSameXAxisValue = xMap[x] - 1
            pointsWithSameYAxisValue = yMap[y] - 1
            count += (pointsWithSameXAxisValue * pointsWithSameYAxisValue)
        return count
