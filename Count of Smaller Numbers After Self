class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        """
        second way is to do the merge sort
        and while merging those arrays we have to make
        sure count of smaller numbers than curr ele
        
        our order of ele's will get destroyed
        but how to keep track of numbers and their indices?
        
        what we can do is to convert array into array of tuples
        where first ele will be val at that idx and second ele will be idx itself
        
                                [(5,0),(2,1),(6,2),(1,3)]
                        /                                       \
                    (5,0),(2,1)                             (6,2),(1,3)
                /               \                          /            \
             (5,0)              (2,1)                    (6,2)          (1,3)
                  \            /                             \          /
        so before merging
        assume i on 5 and j on 2
            we will move j untill it is less than i
            and we will inc count at idx of ith ele
                      (2,1),(5,0)                               (1,3),(6,2)
                      [1,0,0,0]                                 [1,0,1,0]
                            \                                   /
                            i  j    res array
                            0   0   [1,0,1,0]
                            0   1   [1,1,1,0]
                            1   1   [2,1,1,0]
                            2   1 now loop will break
                            (1,3),(2,1),(5,0),(6,2)
        tc = O(nlogn)
        sc = O(n)
                                [5,2,6,1]
                            /               \
                           5,2            6,1
                        /      \        /      \
                        5       2       6       1
                        [1,0,1,0]
                        \       /        \     /
                        (2,1),(5,0)            (1,3),(6,2)
                               i                        j
                        [2,1,1,0]
        """
        
        def createValIdxList(nums):
            valIdxList = []
            n = len(nums)
            for i in range(n):
                currTuple = (nums[i],i)
                valIdxList.append(currTuple)
            return valIdxList
        
        def calSmallerNoCount(leftArr,rightArr,res,n,m):
            j = 0
            for i in range(n):
                while j < m and rightArr[j][0] < leftArr[i][0]:
                    j += 1
                res[leftArr[i][1]] += j
        
        def merge(leftArr,rightArr,res):
            n = len(leftArr)
            m = len(rightArr)
            calSmallerNoCount(leftArr,rightArr,res,n,m)
                
            ans = []
            i = 0
            j = 0
            while i < n and j < m:
                if leftArr[i][0] < rightArr[j][0]:
                    ans.append(leftArr[i])
                    i += 1
                else:
                    ans.append(rightArr[j])
                    j += 1
            while i < n:
                ans.append(leftArr[i])
                i += 1
            while j < m:
                ans.append(rightArr[j])
                j += 1
            return ans
            
                
        
        def mergeSort(valIdxList,res):
            n = len(valIdxList)
            if n == 1:
                return valIdxList
            start = 0
            end = n
            mid = (start + end) // 2
            left = valIdxList[:mid]
            right = valIdxList[mid:]
            left = mergeSort(left,res)
            right = mergeSort(right,res)
            return merge(left,right,res)
            
        n = len(nums)
        res = [0] * n
        valIdxList = createValIdxList(nums)
        mergeSort(valIdxList,res)
        return res
        
    def firstTry(self,nums):
        """
        can we solve this problem using stack
        like first of all store last ele into the stack
        then graze from second last ele 
            pop all ele from stack less than curr ele
            store len of stack which is count of smaller no after currIdx
            store currval into stack
        """
        n = len(nums)
        
        if n == 1:
            return [0]
        st = []
        st.append(nums[-1])
        countArr = [0] * n

        for currIdx in range(n - 2,-1,-1):
            while len(st) > 0 and st[-1] >= nums[currIdx]:
                st.pop()
            countArr[currIdx] = len(st)
            st.append(nums[currIdx])
        return countArr
