Given an array of integers A and an integer B, find and return the number of pairs in A whose sum is divisible by B.

Since the answer may be large, return the answer modulo (109 + 7).



Problem Constraints

1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 106



Input Format

The first argument given is the integer array A.
The second argument given is the integer B.



Output Format

Return the total number of pairs for which the sum is divisible by B modulo (109 + 7).



Example Input

Input 1:

 A = [1, 2, 3, 4, 5]
 B = 2
Input 2:

 A = [5, 17, 100, 11]
 B = 28
 -----------------------------------------------------------------
 class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        """
        this is classic observation based problem
        create freq table where you will be storing
        key val pairs of remainder as key and val is count of 
        no which are getting that remainder by taking mod with B

        then add if there are 3 no with remainder 0 with B 
        then they can make pair with each other
        3C2 => 6 // 2 => 3 pairs
        
        then use two pointer approach to get pairs

        we will take one example
        arr = [24,16,8,7,17,23,35,20,26,28,34,21] and m == 6

        remainder  no with that remainder with 6       count    
        0           24                                  1
        1           7                                   1
        2           2,20,26                             3
        3           21                                  1   
        4           16,28,34                            3
        5           17,23,35                            3

        here for remainder 0 we can take "count C 2"
        then 1 can make pair with 5 => 3 pairs
        2 with 4 => 9 pairs

        in case at last if i == j OR m is even
            then take "count of remainder 3 C 2"
        tc = O(n)
        sc = O(min(n,m)) as we are using map
        """
        n = len(A)
        freq = {}
        for currIdx in range(n):
            currEle = A[currIdx]
            currRemainder = currEle % B
            if currRemainder not in freq:
                freq[currRemainder] = 0
            freq[currRemainder] += 1
        
        ans = 0
        if 0 in freq:
            countForRemainderZero = freq[0]
            ans += ((countForRemainderZero * (countForRemainderZero - 1)) // 2)
        i = 1
        j = B - 1
        while i < j:
            if i in freq and j in freq:
                ans += (freq[i] * freq[j])
            i += 1
            j -= 1
        
        if i == j:
            if i in freq:
                ans += ((freq[i] * (freq[i] - 1)) // 2)
        return ans % (10 ** 9 + 7)

    def bruteForce(self,A,B):
        """
        brute force is to graze over array and just count the pairs
        which satisfies the condition
        tc = O(n ^ 2)
        sc = constant
        """
        n = len(A)
        pairs = 0
        for i in range(n - 1):
            for j in range(i + 1,n):
                if (A[i] + A[j]) % B == 0:
                    pairs += 1
        return pairs
