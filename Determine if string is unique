"""
determine if string contains all unique characters
dont use set or map
deal with bit manipulations
we can have map of 28 char but that is also not allowed
tc = O(n)
sc = totally constant
"""
def isUnique(st):
	checker = 0
	n = len(st)
	for currIdx in range(n):
		currCh = st[currIdx]
		isunique = True
		bitIdxToSetInBitVector = ord(currCh) - ord('a')
		bitVector = 1 << bitIdxToSetInBitVector
		if (checker & bitVector) > 0:
			isunique = False
			break
		else:
			checker = checker | bitVector
	return isunique

print(isUnique("acsa"))
---------------------------------------------------
D 28.12.2021
--------------------------------------------------------
"""
check if currstring is unique or not

ip = bcd
op true

ip = bcb
op = false

can we do it using bit manipulation

Idea is to have bit array named as checkable
which will have 32 bits
by default each bit is set to 0

for each char we have to set the bit to 1
if that bit is set already then return false
"""
def isUnique(st):
	checkable = 0
	for ch in st:
		idxToSetInBitArray = ord(ch) - ord('a')
		bitArray = 1 << idxToSetInBitArray
		if checkable & bitArray > 1:
			return False
		else:
			checkable = checkable | bitArray
	return True

print(isUnique("bcdb"))
