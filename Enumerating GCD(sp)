Problem Description

You are given a number A and a number B. Greatest Common Divisor (GCD) of all numbers between A and B inclusive is taken (GCD(A, A+1, A+2 â€¦ B)).
As this problem looks a bit easy, it is given that numbers A and B can be in the range of 10100.

You have to return the value of GCD found.

Greatest common divisor of 2 numbers A and B is the largest number D that divides both A and B perfectly.



Problem Constraints

1 <= A <= B <= 10100



Input Format

First argument is a string denoting A.

Second argument is a string denoting B.



Output Format

Return a string which contains the digits of the integer which represents the GCD. The returned string should not have any leading zeroes.



Example Input

A = "1"
B = "3"


Example Output

1


Example Explanation

Greatest divisor that divides both 1 and 3 is 1.
--------------------------------------------------------------------
class Solution:
    # @param A : string
    # @param B : string
    # @return a strings
    def solve(self, A, B):
        if A == B:
            return A
        return str(1)

    def bruteForce(self,A,B):
        """
        5 6 7

        8 9 10

        8 9
         
        8 9 10 11
        Intuition is gcd of two or more consecutive eles
        is always 1
        """
        def gcd(a,b):
            if b == 0:
                return a
            return gcd(b,a % b)
        a = int(A)
        b = int(B)
        ans = 1
        if a == b:
            return str(a)
        currGcd = a
        for i in range(a + 1,b + 1):
            currGcd = gcd(currGcd,i)
        return str(currGcd)
