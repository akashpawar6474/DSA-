class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        """
        brute force is generate every substring of second string length
        and check if it is anagram or not
        
        tc = O(n ^ 3)
        sc = constant
        
        Another better approach to calculate freq table first of all
        then move sliding winodw of len(p) over s
        if any window has no of matched char == no of keys in ht
            then add start point as this window has anagram
        
        tc = O(n)
        sc = O(n)
        """
        #Step 1
        def generateFreqTable(p):
            ht = {}
            for ch in p:
                if ch not in ht:
                    ht[ch] = 0
                ht[ch] += 1
            return ht
        
        freq = generateFreqTable(p)
        windowStart = 0
        n = len(s)
        m = len(p)
        ans = []
        matchedCharCount = 0
        for windowEnd in range(n):
            #Step 2
            chAtWindowEnd = s[windowEnd]
            if chAtWindowEnd in freq:
                freq[chAtWindowEnd] -= 1
                if freq[chAtWindowEnd] == 0:
                    matchedCharCount += 1
            
            #Step 3
            currWindowSize = windowEnd - windowStart + 1
            if currWindowSize > m:
                chAtWindowStart = s[windowStart]
                windowStart += 1
                if chAtWindowStart in freq:
                    if freq[chAtWindowStart] == 0:
                        matchedCharCount -= 1
                    freq[chAtWindowStart] += 1
            
            #Step 4
            if matchedCharCount == len(freq):
                ans.append(windowStart)
        return ans
   -----------------------------------------------------------------------
   class Solution:
    # @param A : string
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        """
        idea is to cal freq table of pattern first of all
        then graze over second string
        and find permutations in window
        tc = O(m + n)
        sc = O(m)
        """
        def prepareFreqTable(A):
            ht = {}
            for ch in A:
                if ch not in ht:
                    ht[ch] = 0
                ht[ch] += 1
            return ht
        ht = prepareFreqTable(A)
        windowStart = 0
        noOfMatchedChar = 0
        n = len(B)
        count = 0
        for windowEnd in range(n):
            chAtWindowEnd = B[windowEnd]
            if chAtWindowEnd in ht:
                ht[chAtWindowEnd] -= 1
                if ht[chAtWindowEnd] == 0:
                    noOfMatchedChar += 1
            currWindowLen = windowEnd - windowStart + 1
            if currWindowLen > len(A):
                chAtWindowStart = B[windowStart]
                windowStart += 1
                if chAtWindowStart in ht:
                    if ht[chAtWindowStart] == 0:
                        noOfMatchedChar -= 1
                    ht[chAtWindowStart] += 1
            if noOfMatchedChar == len(ht):
                count += 1
        return count


                    
            
