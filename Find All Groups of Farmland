from collections import deque
class Solution:
    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:
        """
        it is observation based problem no need of fancy graph algorithms
        idea is whenever we encounter farmland
        just graze over right and bottom boundary from cell
        so at last we can get last cell as bottom boundary as row and col boundary as col
        
        tc => O(n)
        sc = constant irrespective of op array
        """
        ans = []
        for i in range(len(land)):
            for j in range(len(land[0])):
                if land[i][j] == 1:
                    farmGroup = []
                    farmGroup.append(i)
                    farmGroup.append(j)
                    
                    rightMostCol = j + 1
                    while rightMostCol < len(land[0]) and land[i][rightMostCol] == 1:
                        rightMostCol += 1
                    
                    bottomMostRow = i + 1
                    while bottomMostRow < len(land) and land[bottomMostRow][j] == 1:
                        bottomMostRow += 1
                        
                    bottomMostRow -= 1
                    rightMostCol -= 1
                    
                    farmGroup.append(bottomMostRow)
                    farmGroup.append(rightMostCol)
                    
                    for k in range(i,bottomMostRow + 1):
                        for l in range(j,rightMostCol + 1):
                            land[k][l] = 0
                    ans.append(farmGroup)
        return ans
    
    def bfsTryTLE(self,land):
        """
        idea is to graze over matrix 
        if found farmland then do dfs
        to find bottom right corner
        
        here bfs can come to rescue
        but here also we will get tle
        """
        def bfs(i,j,land,groupBoundaries,visited):
            q = deque()
            q.append((i,j))
            while q:
                x,y = q.popleft()
                visited.add((x,y))
                if x == len(land) - 1 and y == len(land[0]) - 1:
                    groupBoundaries.append(x)
                    groupBoundaries.append(y)
                    return
                elif (x < len(land) - 1 and y < len(land[0]) - 1 and land[x + 1][y] == 0 and land[x][y + 1] == 0):
                    groupBoundaries.append(x)
                    groupBoundaries.append(y)
                    return
                elif (x == len(land) - 1 and land[x][y + 1] == 0) or (y == len(land[0]) - 1 and land[x + 1][y] == 0):
                    groupBoundaries.append(x)
                    groupBoundaries.append(y)
                    return
                for newx,newy in [(x + 1,y),(x,y + 1)]:
                    if 0 <= newx < len(land) and 0 <= newy < len(land[0]) and (newx,newy) not in visited and land[newx][newy] == 1:
                        q.append((newx,newy))                        
                        
                
        
        ans = []
        visited = set()
        for i in range(len(land)):
            for j in range(len(land[0])):
                if land[i][j] == 1 and (i,j) not in visited:
                    groupBoundaries = []
                    groupBoundaries.append(i)
                    groupBoundaries.append(j)
                    bfs(i,j,land,groupBoundaries,visited)
                    ans.append(groupBoundaries)
        return ans
