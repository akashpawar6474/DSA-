# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.anslist = []
        self.currFreq = 0
        self.maxFreq = 0
        self.prev = None
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        """
        brute force is to create freq table by grazing over bst
        and find out most frequest ele's
        
        we can do inorder trav
        which will give us sorted array on run
        
        so we can have couple of things
            like anslist ,maxFreqUntillNow and currFreq which will be 0 initially
            and we also have to take prev
            
        if root is None then return
        else recur for left subtree
            if prev is None
                inc currFreq by 1
            else
                if prev.val == root.val
                    inc currFreq by 1
            if currFreq = maxFreq
                add currNode to dup list
            if currFreq > maxFreq
                create new list with curr node
                update maxfreq
            set prev
        reucr for right subtree
        """
        def inorder(root):
            if root is None:
                return
            inorder(root.left)
            if self.prev is None:
                self.currFreq += 1
            else:
                if self.prev.val == root.val:
                    self.currFreq += 1
                else:
                    self.currFreq = 1
            if self.currFreq == self.maxFreq:
                self.anslist.append(root.val)
            elif self.currFreq > self.maxFreq:
                self.anslist = [root.val]
                self.maxFreq = self.currFreq
            self.prev = root
            inorder(root.right)
        inorder(root)
        return self.anslist
        
    def misUnderstoodQuestion(self,root):
        """
        brute force is to do inorder trav
        then find out duplicate nodes using two pointers
        
        another approach is to carry list of duplicates
        and for each node pass min in left and max in left
        
        if root.val is equal to any of them then add root.val in dup list
        then recur with new constraints for childs
        
        tc = O(n)
        sc = O(n) implicit stack
        """
        import math
        def preorder(root,leftBoundary,rightBoundary):
            if root is None:
                return
            if root.val == leftBoundary or root.val == rightBoundary:
                self.duplist.append(root.val)
            preorder(root.left,leftBoundary,root.val)
            preorder(root.right,root.val,rightBoundary)
        
        preorder(root,-math.inf,math.inf)
        return self.duplist
