class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        """
        1 2 4 4 3
        s f
          s     f
            s   f
                s,f
                
        assign 0 to fast
        1 2 4 4 3
                s
        f     s
          f     s
            f s
                f,s
        so if we go with slow ptr
        1 to 2 to 4 to 3 to 4(again)
        
        return the idx here
        Q.what will be time complexity here?
        =>
        tc = O(n)
        sc = O(1)
        
        """
        slow = nums[0]
        fast = nums[nums[0]]
        while slow != fast:
            slow = nums[slow]
            fast = nums[nums[fast]]
        fast = 0
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        return slow
    def cyclicSort(self,nums):
        """
        brute force is using frequency table
        which ever key has value 2 then return that key
        tc = O(2n) = O(n)
        sc = O(n)
        
        Q.can we do better?
        yes using cyclic sort we can make use of given data
        like integers are in range of 1 to n
        
        but this approach will distort the output
        tc = O(2n) => O(n)
        sc = constant
        """
        currIdx = 0
        n = len(nums)
        while currIdx < n:
            valAtCurrIdx = nums[currIdx] - 1
            if valAtCurrIdx < n and nums[currIdx] != nums[valAtCurrIdx]:
                nums[currIdx],nums[valAtCurrIdx] = nums[valAtCurrIdx],nums[currIdx]
            else:
                currIdx += 1
                
        
        ans = -1
        for currIdx in range(n):
            if nums[currIdx] != currIdx + 1:
                ans = nums[currIdx] 
                break
        return ans
---------------------------------------------------------------------------29 march 2022
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        """
        other one is slow and fast ptr
        tc = O(n)
        sc = O(1)
        """
        slow = nums[0]
        fast = nums[nums[0]]
        while slow != fast:
            slow = nums[slow]
            fast = nums[nums[fast]]
        fast = 0
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        return fast
    
    def usingCyclicSort(self,nums):
        def cyclicSort(nums):
            currIdx = 0
            n = len(nums)
            while currIdx < n:
                valAtCurrIdx = nums[currIdx]
                if nums[currIdx] != nums[valAtCurrIdx - 1]:
                    nums[currIdx],nums[valAtCurrIdx - 1] = nums[valAtCurrIdx - 1],nums[currIdx]
                else:
                    currIdx += 1
            
            for currIdx in range(n):
                if nums[currIdx] != currIdx + 1:
                    return nums[currIdx]
            return n
        
        return cyclicSort(nums)
