Given two sorted arrays of distinct integers, A and B, and an integer C, find and return the pair whose sum is closest to C and the pair has one element from each array.

More formally, find A[i] and B[j] such that abs((A[i] + B[j]) - C) has minimum value.

If there are multiple solutions find the one with minimum i and even if there are multiple values of j for the same i then return the one with minimum j.

Return an array with two elements {A[i], B[j]}.



Problem Constraints

1 <= length of both the arrays <= 100000

1 <= A[i], B[i] <= 109

1 <= C <= 109



Input Format

The first argument given is the integer array A.
The second argument given is the integer array B.
The third argument given is integer C.



Output Format

Return an array of size 2 denoting the pair which has sum closest to C.



Example Input

Input 1:

 A = [1, 2, 3, 4, 5]
 B = [2, 4, 6, 8]
 C = 9
Input 2:

 A = [5, 10, 20]
 B = [1, 2, 30]
 C = 13


Example Output

Output 1:

 [1, 8]
Output 2:

 [10, 2]


Example Explanation

Explanation 1:

 There are three pairs: (1, 8), (3, 6), (5, 4), that gives the minimum value.
 Since we have to return the value with minimum i and then with minimum j. We will return [1, 8].
Explanation 2:

 [10, 2] is the only pair such abs(10+2-13) is minimum.
 ----------------------------------------------------------------
 class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @param C : integer
    # @return a list of integers
    def solve(self, A, B, C):
        """
        A = [1, 2, 3, 4, 5]
        B = [2, 4, 6, 8]
        C = 9

        A = [5, 10, 20]
        B = [1, 2, 30]
        C = 13

        if p1 and p2 at 0th idx of resepective array
        we cant make decision wheather to move p1 or p2 ahead

        initially take minDiffBwSumAndtarget eq math.inf

        if we take p1 at 0th idx and p2 at last idx of second array
        take the sum and keep track of closest sum
            keep track
        if sum == target
            then update both
        if sum is gt target
            then reduce p2
        elif it is less than 
            then increment p1

        A : [ 1, 3, 5, 7, 9 ]
        B : [ 2, 4, 6, 8, 10 ]
        C : 10


        A : [ 1 ]
        B : [ 2, 4 ]
        C : 4
        """
        import math
        n = len(A)
        m = len(B)
        ptr1,ptr2 = 0,m - 1
        minDiff = math.inf
        ans = [0] * 2
        while ptr1 < n and ptr2 > -1:
            currSum = A[ptr1] + B[ptr2]
            if abs(currSum - C) < minDiff:
                minDiff = abs(currSum - C)
                ans[0] = ptr1
                ans[1] = ptr2
            elif abs(currSum - C) == minDiff:
                if ptr1 == ans[0] and ptr2 < ans[1]:
                    ans[1] = ptr2
            if currSum == C:
                ptr1 += 1
                ptr2 -= 1
            elif currSum < C:
                ptr1 += 1
            else:
                ptr2 -= 1
        return [A[ans[0]],B[ans[1]]]


        
