class Solution:
	# @param A : list of integers
	# @return an integer
	def solve(self, A):
        """
        [1,2,3]
        [1,2] = 1
        [1,3] = 2
        [2,3] = 1
        [1,2,3] = 2

        [1,2,3,4] 
        [1,2] = 1
        [1,3] = 2
        [1,4] = 3
        [2,3] = 1
        [2,4] = 2
        [1,2,3] = 2
        [1,2,4] = 3 - missed
        [1,3,4] = 3
        [1,2,3,4] = 3
        [3,4] = 1
        [2,3,4] = 2

        for 1 = 1 * (arr[j] - arr[i]) + 2 * (arr[j] - arr[i]) + 3 * (arr[j] - arr[i])
              = 1 * (2 - 1) + 2 * (3 - 1) + 3 * (4 - 1)
              = 1 + 4 + 9 = 14

        for 2 = 1 * (arr[j] - arr[i]) + 2 * (arr[j] - arr[i])
              = 1 * (3 - 2) + 2 * (4 - 2)
              = 1 + 4 = 5
        
        for 3 = 1 * (arr[j] - arr[i])
              = 1 * (4 - 3)
              = 1

        so for subsequces where 1 is smallest and 4 is largest
        we have 4 elements j - i + 1
        and 1 and 4 is fixed
        means for j - i -  1 elements we have two options at each position
        either to choose it or not
        so we can have 2 * (j - i - 1)
        subsequces where 1 is smallest and 4 is largest

        first of all sort the data
        so idea is to do it using two loops
        first loop will graze from 0 to n - 1
        and j will graze from i + 1 to end
            for this pair count no of subsequces
            where arr[i] is smallest 
            and arr[j] is largest
            multiply no of subsequces with largest - smallest diff
            and add
        tc = O(n ^ 2)
        sc = constant
        """
        n = len(A)
        A.sort()
        ans = 0
        for smallestNoIdx in range(n - 1):
            for largestNoIdx in range(smallestNoIdx + 1,n):
                noOfSubsequeces = (2 ** (largestNoIdx - smallestNoIdx - 1)) % 1000000007
                diffSum = ((A[largestNoIdx] - A[smallestNoIdx]) * noOfSubsequeces) % 1000000007
                ans += (diffSum % 1000000007)
        return ans % 1000000007



