class Solution:
    def firstUniqChar(self, s: str) -> int:
        """
        idea is very simple 
        create freq table
        then graze over string 
        if currr char is with 1 freq
        then return that idx
        
        tc = O(2n)
        sc = O(n)
        """
        freq = {}
        n = len(s)
        for currIdx in range(n):
            currCh = s[currIdx]
            if currCh not in freq:
                freq[currCh] = 0
            freq[currCh] += 1
        
        ansIdx = -1
        for currIdx in range(n):
            currCh = s[currIdx]
            if freq[currCh] == 1:
                ansIdx = currIdx
                break
        return ansIdx
--------------------------------------------------------------------------11th Jan 2022
class Solution:
    def firstUniqChar(self, s: str) -> int:
        """
        idea is very simple 
        create freq table
        then graze over string 
        if currr char is with 1 freq
        then return that idx
        
        tc = O(2n)
        sc = O(n)
        """
        freq = {}
        n = len(s)
        for currIdx in range(n):
            currCh = s[currIdx]
            if currCh not in freq:
                freq[currCh] = 0
            freq[currCh] += 1
        
        ansIdx = -1
        for currIdx in range(n):
            currCh = s[currIdx]
            if freq[currCh] == 1:
                ansIdx = currIdx
                break
        return ansIdx
        
   ---------------------------------------------------------29 Jan 2022
   class Solution:
    def firstUniqChar(self, s: str) -> int:
        """
        assume we have millions of char
        of dna sequence
        
        maybe which has 4 repeated char and one unique char at last
        so as per below logic we are grazing over string twice
        
        if we can remember order of keys to be inserted
        then we have to graze over hashtable key values
        and wheneve val is 1 return that associated idx
        
        OrderedDict can be implemented using hash function
        and dll
        
        tc = O(n) in worst case also
        sc = O(n)
        """
        from collections import OrderedDict
        ht = OrderedDict()
        n = len(s)
        position = 0
        chCount = 1
        for i in range(n):
            if s[i] not in ht:
                ht[s[i]] = [i,0]
            ht[s[i]][chCount] += 1
        
        for key,val in ht.items():
            if ht[key][chCount] == 1:
                return ht[key][position]
        return -1
    def bruteForce(self,s):
        """
        brute force is to calculate freq table
        then graze over it again
        
        return ch which has 1 freq
        tc = O(2n) = O(n)
        sc = constant
        """
        ht = {}
        n = len(s)
        for i in range(n):
            if s[i] not in ht:
                ht[s[i]] = 0
            ht[s[i]] += 1
        
        for i in range(n):
            if ht[s[i]] == 1:
                return i
        return -1
