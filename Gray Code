class Solution:
    def grayCode(self, n: int) -> List[int]:
        """
        for A == 1
            return [0,1]
        
        A = 2
        gray code will be [00,01,11,10]

        to get gray code of A == 3 from gray code of A == 2
        reverse gray code of A == 2
                        [10,11,01,00]
        
        now prefix 0 to original list
        [000,001,011,010]

        now prefix 1 to reverse list
        [110,111,101,100]

        now this is gray code for A == 3
               [000,001,011,010,110,111,101,100]
        
        we just have to convert it to decimal
        
        0   0
        1   0 1   2 codes
        2 = 4 codes
        3 = 8 codes 
        
        at each level we have 2 ^ n codes
        tc = O(2 ^ n)
        sc = O(2 ^ n)
        """
        def recursiveApproach(n):
            if n == 1:
                return ["0","1"]
            grayCodesOfPrevNo = recursiveApproach(n - 1)

            grayCodeOfCurrNo = []
            prevGrayCodeLen = len(grayCodesOfPrevNo)
            for i in range(prevGrayCodeLen):
                grayCodeOfCurrNo.append("0" + grayCodesOfPrevNo[i])
            
            for i in range(prevGrayCodeLen - 1,-1,-1):
                grayCodeOfCurrNo.append("1" + grayCodesOfPrevNo[i])
            
            return grayCodeOfCurrNo
        
        def getDecimalFromBinaryList(grayCodeOfCurrNo):
            n = len(grayCodeOfCurrNo)
            ans = []
            for i in range(n):
                currBinaryStr = grayCodeOfCurrNo[i]
                ans.append(convertToDecimal(currBinaryStr))
            return ans

        def convertToDecimal(binaryStr):
            starr = list(binaryStr)
            powerOfTwo = 0
            decimalVal = 0
            for i in range(len(starr) - 1,-1,-1):
                if starr[i] == "1":
                    decimalVal += (2 ** powerOfTwo)
                powerOfTwo += 1
            return decimalVal

        grayCodeOfCurrNo = recursiveApproach(n)
        return getDecimalFromBinaryList(grayCodeOfCurrNo)
