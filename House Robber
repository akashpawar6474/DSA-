    
    def rob(self, nums: List[int]) -> int:
        """
        we can optimize on space
        as our formula to get max amount of curr idx
        depends on prev two records
        
        dp[i] = max(nums[i] + dp[i - 2],dp[i - 1])
        tc = O(n)
        sc = constant
        """
        n = len(nums)
        if n == 1:
            return nums[0]
        if n == 2:
            return max(nums[0],nums[1])
        robPrevPrevHouse = nums[0]
        robPrevHouse = max(nums[0],nums[1])
        robCurrHouse = 0
        for i in range(2,n):
            robCurrHouse = max(nums[i] + robPrevPrevHouse,robPrevHouse)
            robPrevPrevHouse = robPrevHouse
            robPrevHouse = robCurrHouse
        return robCurrHouse
    
    def bottomUp(self,nums):
        """
        If we think with some base cases
        robber can either rob 1st or second house
        
        so dp[0] = nums[0] & dp[1] = nums[1]
        dp[n] = max(nums[n] + dp[n - 2],dp[n - 1])
        
        maxAmountAtCurrHouse = max(rob curr House + rob prev prev house,rob prev house)
        tc = O(n)
        sc = O(n)
        """
        def robCore(nums):
            n = len(nums)
            dp = [0 for x in range(n)]
            dp[0] = nums[0]
            dp[1] = max(nums[0],nums[1])
            for i in range(2,n):
                dp[i] = max(nums[i] + dp[i - 2],dp[i - 1])
            return dp[n - 1]
        
        n = len(nums)
        if n == 1:
            return nums[0]
        if n == 2:
            return max(nums[0],nums[1])
        return robCore(nums)
    
    def topDown(self,nums):
        """
        This problem has optimal substructure
        means we can also start from second last or third last house
        and there are lot of overlapping subproblems
        
        so dp comes into picture
        tc = O(n)
        sc = O(n)
        """
        def robCore(nums,ci,n,dp):
            if ci >= n:
                return 0
            if ci in dp:
                return dp[ci]
            robCurrentHouse = nums[ci] + robCore(nums,ci + 2,n,dp)
            skipCurrentHouse = robCore(nums,ci + 1,n,dp)
            maxAmountFromCurrHouse = max(robCurrentHouse,skipCurrentHouse)
            dp[ci] = maxAmountFromCurrHouse
            return maxAmountFromCurrHouse
        
        return robCore(nums,0,len(nums),{})
    def recursiveBruteForce(self,nums):
        """
        brute force is same in line with climbing stairs
        or fibonacci number
        
        either we rob current house and skip next
        else we rob next house
        
        if we reached end then just return 0 as no house to rob
        at each position we have two choices
        tc = O(2 ^ n)
        sc = O(2 ^ n)
        """
        def robCore(nums,ci,n):
            if ci >= n:
                return 0
            robCurrentHouse = nums[ci] + robCore(nums,ci + 2,n)
            skipCurrentHouse = robCore(nums,ci + 1,n)
            maxAmountFromCurrHouse = max(robCurrentHouse,skipCurrentHouse)
            return maxAmountFromCurrHouse
        
        return robCore(nums,0,len(nums))
        
