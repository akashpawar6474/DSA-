class Solution:
    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        """
        Idea is to have two pointers
        and check if both intervals overalpping or not
        
        there are two possibilities
        1 2 3 4 5 6
        - - - -
            - - - -  A overlaps B as  A.starttime <= b.startTime <= A.endtime
            
              - - -
        - - - - -    B overlaps A means b.startTime <= A.startTime <= b.endtime
        
        so if any condition is true
        then start and end of our merged interval is
        start = max(Astart,Bstart)
        end = min(Aend,Bend)
        
        now we will skip interval which is ending first 
        as greter ending time interval can be potential candidate for futher scenarios
        tc = O(n + m)
        sc = O(1)
        """
        if not firstList or not secondList:
            return []
        a,b,st,end = 0,0,0,1
        n = len(firstList)
        m = len(secondList)
        ans = []
        while a < n and b < m:
            AoverlapsB = firstList[a][st] <= secondList[b][st] <= firstList[a][end]
            BoverlapsA = secondList[b][st] <= firstList[a][st] <= secondList[b][end]
            
            if AoverlapsB or BoverlapsA:
                overlappingInterval = [max(firstList[a][st],secondList[b][st]),min(firstList[a][end],secondList[b][end])]
                ans.append(overlappingInterval)
            
            if firstList[a][end] < secondList[b][end]:
                a += 1
            else:
                b += 1
        return ans
               
    def firstTry(self,firstList,secondList):
        """
        [[0,2],[5,10],[13,23],[24,25]]
        [[1,5],[8,12],[15,24],[25,26]]
        
        
        
        1 2 3 4 5
            - - -
        - - - -
        
        ask what if any list is empty?
        return empty list
        
        Q.how to know if two intervals are merging?
        if end of first >= start of second 
            OR
            start of first <
            
        is it like combine both arrays and sort
        [0,2][1,5][5,10][8,12][13,23],[15,24][24,25][25,26]
        
        I think this should work
        merge both arrays based on start time
        as it is given both arrays are in sorted order
        we just have to merge them
        
        nope that should not work
        because if we have empty array
        
        This will break of such edge cases
        [[3,5],[9,20]]
        [[4,5],[7,10],[11,12],[14,15],[16,20]]
        """
        def merge(firstList,secondList):
            sortedList = []
            i1 = 0
            i2 = 0
            n = len(firstList)
            m = len(secondList)
            
            while i1 < n and i2 < m:
                if firstList[i1][0] < secondList[i2][0]:
                    sortedList.append(firstList[i1])
                    i1 += 1
                else:
                    sortedList.append(secondList[i2])
                    i2 += 1
            
            while i1 < n:
                sortedList.append(firstList[i1])
                i1 += 1
                
            while i2 < m:
                sortedList.append(secondList[i2])
                i2 += 1
            return sortedList
                
        if not firstList or not secondList:
            return []
        
        sortedList = merge(firstList,secondList)
        slLen = len(sortedList)
        ans = []
        for i in range(slLen - 1):
            if sortedList[i][1] >= sortedList[i + 1][0]:
                overlappingInterval = [sortedList[i + 1][0],sortedList[i][1]]
                ans.append(overlappingInterval)
        return ans
        
