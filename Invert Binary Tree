
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        """
        we can do this using level order traversal also
        when ever we pop the node
        shift its childern using intermediate node
        
        tc = O(n)
        sc = O(2 ^ last level)
        """
        from collections import deque
        if root is None:
            return None
        q = deque()
        q.append(root)
        while q:
            top = q.popleft()
            leftChild = top.left
            top.left = top.right
            top.right = leftChild
            
            if top.left:
                q.append(top.left)
            if top.right:
                q.append(top.right)
        return root
    def dfs(self,root):
        """
        This is very simple problem
        which can be solved using postorder
        
        we can make mistake of not caching left subtree
        which can be a big red flag and that is the area of interest 
        for this question
        
        tc = O(n)
        sc = O(n)
        """
        if root is None:
            return None
        cachedLeftSubtree = root.left
        root.left = self.invertTree(root.right)
        root.right = self.invertTree(cachedLeftSubtree)
        return root
    
------------------------------------------------------------------------------ 06 Feb 2022
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        """
        can we do it iteratively
        first of all do simple traversal using external stack
        
        """
        if root is None:
            return None
        st = []
        st.append(root)
        while st:
            top = st.pop()
            top.right,top.left = top.left,top.right
            if top.right:
                st.append(top.right)
            if top.left:
                st.append(top.left)
        return root
    
    def recursive(self,root):
        """
                            2
                    /               \   
                    1               3
                    
        now if root is None return none
        Assumption => our fun takes root node and return root node with inverted binary tree
        mainLogin => at each root cache right node recur for left and attach to right
                    then recur for cached right node and attach to left
                    return root node
        tc = O(n)
        sc = O(n)
        """
        if root is None:
            return root
        cacheRightSubtree = root.right
        root.right = self.invertTree(root.left)
        root.left = self.invertTree(cacheRightSubtree)
        return root
