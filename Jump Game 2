import math
class Solution:
    def jump(self, nums: List[int]) -> int:
        """
        iterative approach is same
        dp[i] indicates min jumps to reach last idx from ith idx
        initially we will store dp[len(nums) - 1] = 0
        as 0 jumps are necessary to reach last idx from last idx
        then graze from second last idx to 0th idx
            for every idx graze over the jumps
                dp[i] = min(dp[i],dp[min(len(nums) - 1,i + jumps)] + 1)
        and at last retun dp[0]
        tc = O(n ^ 2)
        sc = O(n)
        """
        dp = [math.inf] * len(nums)
        dp[len(nums) - 1] = 0
        for currIdx in range(len(nums) - 2,-1,-1):
            for jumps in range(1,nums[currIdx] + 1):
                dp[currIdx] = min(dp[currIdx],dp[min(len(nums) - 1,currIdx + jumps)] + 1)
        return dp[0]
    
    
    def TopDown(self,nums):
        """
        top down approach is very simple
        base case if curridx >= last idx then return 0
        then do a lookup
        then take jumps = inf
        graze over range of 1 to max jumps
            then recur for the solutions and see the minimum
        then store the min jumps in lookup table
        """
        def topDown(nums,currIdx,ht):
            if currIdx >= len(nums) - 1:
                return 0
            if currIdx in ht:
                return ht[currIdx]
            jumps = math.inf
            for jump in range(1,nums[currIdx] + 1):
                minJumpsFromNextIdx = topDown(nums,currIdx + jump,ht)
                jumps = min(jumps,minJumpsFromNextIdx + 1)
            ht[currIdx] = jumps
            return jumps
        return topDown(nums,0,{})
