import math
class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        """
        brute force is to generate nth row and take kth ele
        
        in last row we will be having 2 ^ n - 1 ele ments
        so it will take tc = O(2 ^ n) => O(2 ^ 30)
        
        so that is not way to follow
        now just draw rows to figure out some obeservation
        
            1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
        1   0
        2   0 1
        3   0 1 1 0
        4   0 1 1 0 1 0 0 1
        5   0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0
        
        if k = 2
            leftchild = 2 * 2 - 1 => 3
            rightChild = 2 * 2 = 4
            
        now if k has 0 in n - 2nd row
        so left child will be odd idx
            it will remain same as k val
        for right child which is at even idx
            it will change its state
        tc = O(logk)
        sc = O(logk)
        """
        if k == 1:
            return 0
        parentVal = self.kthGrammar(n - 1,math.ceil(k / 2))
        if k & 1 == 0:
            return abs(parentVal - 1)
        else:
            return parentVal
