class Solution:
    def __init__(self):
        self.maxPath = []
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        """
        idea is to sort the array first
        [1,2,3]
        
        dp[i] will indicate maximum divisible subset untill idx i
        by default for each idx place its val into its subset list
        
        dp = [[1],[2],[3]]
        
        tc = O(n ^ 2)
        sc = O(n)
        """
        nums.sort()
        maxSubset = []
        n = len(nums)
        if n < 2:
            return nums
        dp = [[nums[i]] for i in range(n)]
        
        for i in range(1,n):
            for j in range(i):
                if (nums[i] % nums[j] == 0 and len(dp[j]) >= len(dp[i])):
                    dp[i] = dp[j] + [nums[i]]
            if len(maxSubset) < len(dp[i]):
                maxSubset = dp[i]
        return maxSubset
    
    def firstTry(self,nums):
        """
        we have to dind largest subset
                                [1,2,3]
                            /           \
                        include 1       exclude 1
                        [1]             [2]
                /           \
                i 2         e 2
                [1,2]       [1]
            /       \       /   \
        i 3         e 3     i 3 e 3
        not                 [1,3] [1]  
        possible    [1,2]
        
        Assumption => our fun takes array and generates all divisible subsets one by one
        
        Main logic => if prevIdx = -1 or nums[previdx] % nums[currIdx] == 0 and vice versa
                        then add currIdx
                        and recur for other
                    else skip curr
        
        Base case => if currIdx reached end return
                    if currPath len is gt maxPathLen
                        then take a copy and update
                        
                                fn(-1,0,[])
                            /                   \
                        fn(0,1,[1])             fn(-1,1,[])
                /                   \           /               \
          fn(1,2,[1,2])         fn(0,2,[1])
         /           \
        
        """
        def topDown(nums,dp,prevIdx,currIdx,currPath):
            if currIdx >= len(nums):
                return currPath
            """
            if len(currPath) < len(self.maxPath):
                self.maxPath = currPath[:]
            """
            if (prevIdx,currIdx) in dp:
                return dp[(prevIdx,currIdx)]
            includingCurrIdx = []
            if prevIdx == -1 or (nums[prevIdx] % nums[currIdx] == 0 and nums[currIdx] % nums[prevIdx] == 0):
                includingCurrIdx = topDown(nums,dp,currIdx,currIdx + 1,currPath.append(nums[currIdx]))
            excludingCurrIdx = topDown(nums,dp,prevIdx,currIdx + 1,currPath)
            dp[(prevIdx,currIdx)] = includingCurrIdx if len(includingCurrIdx) > len(excludingCurrIdx) else excludingCurrIdx
            return dp[(prevIdx,currIdx)]
        
        dp = {}
        prevIdx = -1
        currIdx = 0
        currPath = []
        return topDown(nums,dp,prevIdx,currIdx,currPath)
            
