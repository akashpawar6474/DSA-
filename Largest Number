class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        """
        23, 234
        
        if we concatenate 
        a + b => 23234
        b + a => 23423
        
        means by putting b first we are getting max no
        
        90 908
        
        a + b => 90908
        b + a => 90890
        
        here putting a first gives us maximum no 
        so in merge function we can just check 
        if int(a + b) > int(b + a):
            return True means a will come first
        else
            return False means b will come first
            
        Area of interest is comparing two string numbers
        tc = O(n ^ 2)
        sc = constant
        """
        def compare(st1,st2):
            aPlusb = str(st1) + str(st2)
            bPlusa = str(st2) + str(st1)
            return aPlusb > bPlusa
        
        def bubbleSort(nums):
            n = len(nums)
            for i in range(n):
                for j in range(n - i - 1):
                    if not compare(nums[j],nums[j + 1]):
                        nums[j],nums[j + 1] = nums[j + 1],nums[j]
        
        bubbleSort(nums)
        ansString = ''.join(str(x) for x in nums)
        if int(ansString) == 0:
            return "0"
        return ansString
        
        
    -----------------------------------------------------------11 Feb 2022 using merge sort
    
    class Solution:
    # @param A : tuple of integers
    # @return a strings
    def largestNumber(self, A):
        def mergeSort(A):
            n = len(A)
            if n <= 1:
                return A
            start = 0
            end = n - 1
            mid = (start + end) // 2
            left = mergeSort(A[:mid + 1])
            right = mergeSort(A[mid + 1:])
            return merge(left,right)

        def compare(no1,no2):
            aPlusb = str(no1) + str(no2)
            bPlusa = str(no2) + str(no1)
            if int(aPlusb) > int(bPlusa):
                return True
            else:
                return False

        def merge(left,right):
            n = len(left)
            m = len(right)
            p1 = 0
            p2 = 0
            sortedArr = []
            while p1 < n and p2 < m:
                if compare(left[p1],right[p2]):
                    sortedArr.append(left[p1])
                    p1 += 1
                else:
                    sortedArr.append(right[p2])
                    p2 += 1
            
            while p1 < n:
                sortedArr.append(left[p1])
                p1 += 1
            while p2 < m:
                sortedArr.append(right[p2])
                p2 += 1
            return sortedArr
        
        A = list(A)
        A = mergeSort(A)
        ansStr = ''.join(str(x) for x in A)
        if int(ansStr) == 0:
            return "0"
        return ansStr


        
