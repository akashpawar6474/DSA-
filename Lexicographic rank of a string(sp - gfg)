Problem Description

Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints

1 <= |A| <= 1000



Input Format

First argument is a string A.



Output Format

Return an integer denoting the rank of the given string.



Example Input

Input 1:

A = "acb"
Input 2:

A = "a"


Example Output

Output 1:

2
Output 2:

1


Example Explanation

Explanation 1:

Given A = "acb".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1.
----------------------------------------------------------
class Solution:
	# @param A : string
	# @return an integer
	def findRank(self, A):
        """
        is it like generating all permutation
        then sort them and return that idx which has same string

        but it will definitely get tle?

        This is something different
        d a c e b 

        how to find rank of curr string?
        we have to find out no of strings lexicographically less than
        curr string and add 1 to it

        now question is how to find out strings less than curr string?

        for d how many strings less than it?
        find smallest char than curr char in right
            and multiply it with remaing len factorial

        for a find out no of smallest char in right
            and multiply it with remaining len factorial
        """
        def preComputefactorialMod():
            fact = [1] * 1001
            for i in range(1,1001):
                fact[i] = (fact[i - 1] * i) % 1000003
            return fact
        
        fact = preComputefactorialMod()
        stLen = len(A)
        ans = 0
        for i in range(stLen):
            currCh = A[i]
            chCountLessThanCurrCh = 0
            for j in range(i + 1,stLen):
                if ord(A[j]) < ord(currCh):
                    chCountLessThanCurrCh += 1
            remainingLen = stLen - i - 1
            remainingLenFact = fact[remainingLen]
            ans += ((chCountLessThanCurrCh * remainingLenFact) % 1000003)
        return (ans + 1) % 1000003

