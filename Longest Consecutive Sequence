class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        """
        brute force is to take each ele and for each
        ele graze over the array
        tc = O(n ^ 2)
        sc = constant
        
        or with sorting also we can solve this problem
        tc = O(nlogn)
        sc = O(n)
        
        rather than this we can convert it to set
        and for each ele we will check if prev ele is in set
        if yes then continue
        else start counting longest consecutive sequece from that element
        tc = O(n)
        sc = O(n)
        """
        s = set(nums)
        n = len(nums)
        lcs = 0
        for currIdx in range(n):
            currEle = nums[currIdx]
            if currEle - 1 in s:
                continue
            count = 1
            while currEle + 1 in s:
                count += 1
                currEle += 1
            lcs = max(lcs,count)
        return lcs
---------------------------------------------------27 feb 2022
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        """
        In worst case we are visiting array ele
        only twice

        tc = O(n)
        sc = O(1)
        """
        s = set(nums)
        maxSequence = 0
        for no in nums:
            if no - 1 in s:
                continue
            count = 1
            currNo = no
            while currNo + 1 in s:
                count += 1
                currNo += 1
            maxSequence = max(maxSequence,count)
        return maxSequence
