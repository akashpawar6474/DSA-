class Solution:
    
    def lengthOfLongestSubstring(self, s: str) -> int:
        """
        brute force is find every substring
        then make set of it 
        if length is equal then keep track of maximum
        
        for generating substrings it will take 3 loops
        then additional space everytime
        tc = O(n ^ 3)
        sc = O(n) for set where substring is whole string
        
        Better approach is have slidng window
        windowend will graze over range
            take a loop untill ele at windowEnd is not equal to ele at windowstart
                inc windowstart
            when found that first occurance 
            then skip it by incrementing windowstart
            keep track of lenght with max

        tc = O(n)
        sc = O(n)
        
        But problem is that rather than 
        we are shrinking window by walking
        
        what if we jump or shrink windowStart in one go
        we can store mapping of char and its idx in map
        we will graze our windowEnd 
            if char at windowend is present into map
                update windowstart to max of windowStart and idx of char at windowend + 1
            update idx of curr char
            keep track of len
            
        tc = O(n)
        sc = O(n)
        """
        windowStart = 0
        n = len(s)
        ht = {}
        maxLen = 0
        for windowEnd in range(n):
            currChAtWindowEnd = s[windowEnd]
            if currChAtWindowEnd in ht:
                prevIdxOfCharAtWindowEnd = ht[currChAtWindowEnd]
                windowStart = max(windowStart,prevIdxOfCharAtWindowEnd + 1)
            ht[currChAtWindowEnd] = windowEnd
            currWindowLen = windowEnd - windowStart + 1
            maxLen = max(currWindowLen,maxLen)
        return maxLen
        
        ------------------------------------------------------------
        D 29.12.2021
        -----------------------------------------------------------
class Solution:    
    def lengthOfLongestSubstring(self, s: str) -> int:
        """
        Brute Force is to generate every substring
        then check with set and keep track of longest substring
        tc = O(n ^ 3)
        sc = O(n)
        
        
        Better approach is using sliding window with the help
        of set
        while grazing over string
            if curr char is not in set
                then add
                keep track of length
            else
                shrink the window
                and remove that char from set
                
        tc = O(n + n) => O(n)
        sc = O(n)
        
        Best we can do when we are shrinking window in above
        solution we are just walking step by step
        
        Instead we can store char and its idx into map
        when we found the char 
            then take the prev idx from map
            update windowstart
        then update/add record with currIdx in map
        
        tc = O(n)
        sc = O(n) 
        """
        windowStart = 0
        n = len(s)
        ht = {}
        maxLen = 0
        for windowEnd in range(n):
            charAtWindowEnd = s[windowEnd]
            if charAtWindowEnd in ht:
                prevIdxOfCurrCh = ht[charAtWindowEnd]
                windowStart = max(windowStart,prevIdxOfCurrCh + 1)
            ht[charAtWindowEnd] = windowEnd
            currLen = windowEnd - windowStart + 1
            maxLen = max(maxLen,currLen)
        return maxLen
        
  ------------------------------------------------------------------------ 6 march 2022
  class Solution:
	# @param A : string
	# @return an integer
	def lengthOfLongestSubstring(self, A):
        """
        this is classic sliding window problem
        along with the hashmpa
        In hashmap we will keep track of 
        ch and its previous latest idx
        tc = O(n)
        sc = O(n)
        """
        ht = {}
        maxWindowLen = 0
        windowStart = 0
        for windowEnd in range(len(A)):
            currCh = A[windowEnd]
            if currCh in ht:
                windowStart = max(windowStart,ht[currCh] + 1)
            currWindowLen = windowEnd - windowStart + 1
            ht[currCh] = windowEnd
            maxWindowLen = max(maxWindowLen,currWindowLen)
        return maxWindowLen


---------------------------------------------------------------------------------- 10 june 2022
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        """
        Idea is to use the hashmap
        whenever current char is present in the map
            then update the windowstart to curr char previous idx  + 1
        then update the currchar with curridx
        then take the windowsize 
        and keep track of windowsize with maximum
        
        there is edge case
        if string is like this abba
        so at 2nd idx our currstart will come to 2nd idx
        but still in the map we have a = 0 and b = 2
        then when we go on 3rd idx
        then we should not update windowstart to 1 
        
        Means we should not stretch windowstart to backside
        so while updating windowStart we will take maximum between
        
        windowStart and curr char previous idx + 1
        tc = O(n)
        sc = O(n)
        """
        windowStart = 0
        ht = {}
        maxWindowSize = 0
        for windowEnd in range(len(s)):
            currCh = s[windowEnd]
            if currCh in ht:
                prevIdxOfCurrChar = ht[currCh]
                windowStart = max(windowStart, prevIdxOfCurrChar + 1)
            ht[currCh] = windowEnd
            windowSize = windowEnd - windowStart + 1
            maxWindowSize = max(maxWindowSize, windowSize)
        return maxWindowSize
