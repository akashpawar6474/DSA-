# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.maxPath = 0
    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:
        """
        so base case is whenever we are at leaf node
        return that node and path dist as 0
            recur for both left and right subtree
        
            we will be having valWithMaxPath in left and its path distance
            and valwithmaxpath in right and its path distance
            
            if root.val == valWithMaxPath
                then add path distance from left to curr path
            if root.val == valwithmaxpath in right
                then add path distance from right to curr path distance
            
            at last return root val and max path among currpath,path distance from left and path distance from right
            
        [1,null,1,1,1,1,1,1]
                                1
                                    \   
                                    1
                                /       \
                                1       1
                            /      \      \ 
                            1       1       1
        ideally this should return 4 but it is returning 6
        

        this is same as diameter of tree problem
        where base case is to return 0 as max height with same value
        ask childern what is max heights with unvalue from you guys
            as maxUnivalueHeightInLeft and maxUnivalueHeightInRight
        
        if left child is there and it is same
            then updae heightInLeft by 1
        else
            make it 0
        if right child is there and it is same
            then update heightInRight by 1
        else
            make it 0
        
        now take maxPath at currNode
        using two heights from left and right
        
        at last return root and maxHeight from left or right
        
        tc = O(n)
        sc = O(n)
        """ 
        def postorder(root):
            if root is None:
                return 0
            
            #take max Univalue heights from both subtrees
            maxUnivalueHeightInLeft = postorder(root.left)
            maxUnivalueHeightInRight = postorder(root.right)
            
            maxPathAtCurrNode = 0
            
            #check with childern and update univalue heights accordingly
            if root.left and root.left.val == root.val:
                maxUnivalueHeightInLeft += 1
            else:
                maxUnivalueHeightInLeft = 0
            if root.right and root.val == root.right.val:
                maxUnivalueHeightInRight += 1
            else:
                maxUnivalueHeightInRight = 0
            
            #add heights and get max path at curr Node
            maxPathAtCurrNode = maxUnivalueHeightInLeft + maxUnivalueHeightInRight
            
            #keeep track with maximum
            self.maxPath = max(self.maxPath,maxPathAtCurrNode)
            
            #return max univalue height untill currNode
            return max(maxUnivalueHeightInLeft,maxUnivalueHeightInRight)
        
        maxUnivalueHeightInTree = postorder(root)
        return self.maxPath
            
