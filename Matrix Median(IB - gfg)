class Solution:
	# @param A : list of list of integers
	# @return an integer
	def findMedian(self, A):
        """
        A = [
            [1, 3, 5,6],
            [2, 6, 9, 10],
            [3, 6, 9, 11]
            ] 
            
            3 * 4 => 12
            
            [1,2,3,3,5,6,6,6,9,9,10,11]
            
            min - min(1,2,3)
            max = max(5,9,9)
            
            mid = 5
            range = max - min
            tc = log(range) * n * log(m)
            sc = constant
            
            [1,3,5,2,6,9,3,6,9]
            [1,3,3,2,5,6,9,6,9]
            
            1, 3, 5 arr mid = 5
            start   end     mid
            0       2       1
            2       2       2
            2       1     
            
            2,3,3,4, 6, 9 mid 5 <=
            start end mid
            0      2    1
            0      0    0
            1      0
                   [1, 3, 5,6],
        [2, 6, 9, 10],
        [3, 6, 9, 11]
        """
        def getMinAndMaxEle(A):
            rows = len(A)
            cols = len(A[0])
            minEle = A[0][0]
            maxEle = A[0][cols - 1]
            for i in range(1,rows):
                minEle = min(minEle,A[i][0])
                maxEle = max(maxEle,A[i][cols - 1])
            return minEle,maxEle
            
        
        def binarySearch(arr,target):
            start = 0
            end = len(arr) - 1
            while start <= end:
                mid = (start + end) // 2
                if arr[mid] < target:
                    start = mid + 1
                else:
                    end = mid - 1
            return end + 1
                    
        
        def getCountOfEleLessThanMid(A,mid):
            count = 0
            for row in A:
                count += binarySearch(row,mid)
            return count
            
            
        
        rows = len(A)
        cols = len(A[0])
        start,end = getMinAndMaxEle(A)
        ans = -1
        eleLessThanMedian = (rows * cols) // 2
        
        while start <= end:
            mid = (start + end) // 2
            count = getCountOfEleLessThanMid(A,mid)
            if count <= eleLessThanMedian:
                ans = mid
                start = mid + 1
            else:
                end = mid - 1
        return ans
