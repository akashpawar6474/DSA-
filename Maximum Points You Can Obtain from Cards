class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        """
        This is same as "Maximize sum of K corner elements in Array" GFG
        can be also solved using dp
        
        This is classic circular sliding window problem
        which can be solved with circular sliding window
                ws
        [1,2,3,4,5,6,1] k = 3
        
        first calculate ws position => n - k
        
        then calculate sum of last k elements and keep track with maxsum
        
         take a loop untill it is less than n
            remove ele at windowstart from currsum
            increment windowstart
            add windowend to currsum
            increment windowend
    
        tc = O(n)
        sc = constant
        """
        def calculateLastWindow(cardPoints,n,windowStart):
            currSum = 0
            for i in range(windowStart,n):
                currSum += cardPoints[i]
            return currSum
        
        n = len(cardPoints)
        windowStart = n - k
        windowEnd = 0
        
        currSum = calculateLastWindow(cardPoints,n,windowStart)
        maxSum = currSum
        
        while windowStart < n:
            currSum -= cardPoints[windowStart]
            windowStart += 1
            currSum += cardPoints[windowEnd]
            windowEnd += 1
            maxSum = max(currSum,maxSum)
        
        return maxSum
 --------------------------------------------------------------------------17 Jan 2022
 class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        """
        THis is classic sliding window problem
        we have to find max sum of subarray of size k
        where all elements either belong to start or end of an array
        
        if k == 3
        then all 3 from start or end
            1 from start and 2 from end OR vice-versa
        tc = O(2k)
        sc = O(1)
        """
        def calLastWindowSum(windowStart,n,cardPoints):
            currSum = 0
            while windowStart < n:
                currSum += cardPoints[windowStart]
                windowStart += 1
            return currSum
        
        n = len(cardPoints)
        windowStart = n - k
        windowEnd = 0
        windowSum = calLastWindowSum(windowStart,n,cardPoints)
        maxSum = windowSum
        
        while windowStart < n:
            windowSum -= cardPoints[windowStart]
            windowStart += 1
            windowSum += cardPoints[windowEnd]
            windowEnd += 1
            maxSum = max(windowSum,maxSum)
        return maxSum
            
        
        
