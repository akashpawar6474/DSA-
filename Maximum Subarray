import math
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        """
        this problem can also be solved using divide and conquer
        we will divide array untill we remain with only one element
        
        idea is to find the mid
        then find subarray with max sum including mid(CSS => crossing sum subarray)
        lss = left subarray sum
        rss = right subarry sum
        then recur for left and right part and return maximum
        tc = O(nlogn)
        sc = O(logn)
        """
        def divideAndConquer(nums,start,end):
            if start == end:
                return nums[start]
            mid = (start + end) // 2
            cssLeftMax = -math.inf
            tsum = 0
            for currIdx in range(mid,start - 1,-1):
                tsum += nums[currIdx]
                if tsum > cssLeftMax:
                    cssLeftMax = tsum
            
            cssRightMax = -math.inf
            tsum = 0
            for currIdx in range(mid + 1,end + 1):
                tsum += nums[currIdx]
                if tsum > cssRightMax:
                    cssRightMax = tsum
            
            lss = divideAndConquer(nums,start,mid)
            rss = divideAndConquer(nums,mid + 1,end)
            return max(cssLeftMax + cssRightMax,lss,rss)
        
        n = len(nums)
        ans = divideAndConquer(nums,0,n - 1)
        return ans
    def kadanesAlgo(self,nums):
        """
        brute force is using two loops it will take quadratic time
        
        history of this problem:
        Grenandar was solving the problem of finding max rectangular subarray sum
        in 2-d matrix and he proposed O(n ^ 6) solution
        
        Grenandar proposed 1-d problem to get more insights into the problem
        and he derived O(n ^ 2) approach (brute force)
        then some scientist shamos derived O(nlogn) solution using divide and conquer
        algorithm
        so he has given seminar in carneige mellon university about this problem
        which was attended by Jay kadane who has derived O(n) dp+greedy problem
        
        Q.how problem is greedy or dp?
        at every step if running sum gets below 0 then we make it 0
        because greedily rather than continuing -ve sum
        it is better to start fresh againg from next idx
        
        at each position we have two choices either to start from curr idx
        or add curr ele to max subarray sum untill previous idx
        
        Q.what questions should we ask ourselfs?
        1.at each postion what we have to do?
        2.if running sum is less than 0 then what we will do?
        tc = O(n)
        sc = constant
        
        take initial maxSum as -math.inf
        """
        maxSum = -math.inf
        n = len(nums)
        currSum = 0
        for currIdx in range(n):
            currSum += nums[currIdx]
            maxSum = max(currSum,maxSum)
            if currSum < 0:
                currSum = 0
        return maxSum
        
----------------------------------------------------------6 Jan 2022 (I got intuition behind kadanes algo)
import math
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        """
        we will discuss how we reached kadane's algo
        
        arr = [ only +ve ele ] =>Q.what is max subarray sum? => sum of array
        arr = [ only -ve ele ] =>Q.what is max subarray sum? => max ele in array
        
        arr[ -ve ele's | +ve ele | -ve ele's ] => Q.what is max subarray sum?
        => it will subarray with +ve ele only
        
        arr = [ -ve ele's | _ 1-ve ele | +ve ele's | -ve ele's ]
        Q.by adding previous adjcent ele to +ve ele's subarray will it increase the sum?
        => definitely not
        
        arr = [ -ve ele's | _ 1 +ve ele _ 1 -ve ele | +ve ele's | -ve ele's ]
        Q.just before +ve ele's subarray there is pair of +ve and -ve ele
          which makes total +ve
          so by adding that total to +ve subarray forward will it increase the sum?
        => yes
        
        So that is the point 
            1.if currSum is +ve then that will not reduce subarray sum of forward ele's
                so take it forward
            2.if currSum is -ve then that will definitely reduce subarray sum of forward(remaining)
                ele so make it 0 and go ahead
        """
        maxSum = -math.inf
        runningSum = 0
        n = len(nums)
        for currIdx in range(n):
            currEle = nums[currIdx]
            runningSum += currEle
            if runningSum > maxSum:
                maxSum = runningSum
            if runningSum < 0:
                runningSum = 0
        return maxSum
    def dividerAndConquer(self,nums):
        """
        Basic solution is to find all subarrays
        then cal sum and track it
        tc = O(n ^ 3)
        sc = O(1)
        
        rather than using third loop
        we can calculate sum on run
        tc = O(n ^ 2)
        sc = O(1)
        
        we can do this using divide and conquer too
        assume that our mid is part of max sum subarray
        then cal subarray sum towards left and right
        Q.how to do that
        go towards in left and right
        add curr ele to tsum
        and if it is gt subarray sum in left and right
            then update it
            
        then recur for left and right part
        then return max among subarray from 
            1.subarray sum in left including mid plus
              subarray sum in right
            2.max subarray sum in left part
            3.max subarray sum in right part
        tc = O(nlogn)
        sc = O(n)
        """
        def divideAndConquer(nums,st,end):
            if st == end:
                return nums[st]
            mid = (st + end) // 2
            
            subarraySumInLeftWithMid = -math.inf
            runningSum = 0
            for i in range(mid,st - 1,-1):
                runningSum += nums[i]
                if runningSum > subarraySumInLeftWithMid:
                    subarraySumInLeftWithMid = runningSum
                
            subarraySumInRightWithMid = -math.inf
            runningSum = 0
            for i in range(mid + 1,end + 1):
                runningSum += nums[i]
                if runningSum > subarraySumInRightWithMid:
                    subarraySumInRightWithMid = runningSum
            
            subarraySumInLeftPart = divideAndConquer(nums,st,mid)
            subarraySumInRightPart = divideAndConquer(nums,mid + 1,end)
            return max(subarraySumInLeftWithMid + subarraySumInRightWithMid,subarraySumInLeftPart,subarraySumInRightPart)
        
        st = 0
        end = len(nums) - 1
        return divideAndConquer(nums,st,end)
                
-----------------------------------------------------------------------------------------7 Jan 2022 I understood how to find left and right Idx of max subarray
import math
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        """
        Q.How to get left and right idx of max subarray sum?
        
        we can have 
        leftIdx = 0
        rightIdx = 0
        windowStart initially 0 set it to next idx when ever we abadon array
        window end which is used to graze over array
            add curr ele to curr sum
            if curr sum gt maxsum
                maxsum = currsum
                leftIdx = windowStart
                rightIdx = windowend
            if currsum gone beyond 0
                then abadon that subarray
                windowStart = windowEnd + 1
        print nums[leftIdx : rightIdx + 1]
        tc = O(n)
        sc = constant
        
        Now I feel completed
        """
        windowStart = 0
        leftIdx = 0
        rightIdx = 0
        currSum = 0
        maxSum = -math.inf
        n = len(nums)
        for windowEnd in range(n):
            currSum += nums[windowEnd]
            if currSum > maxSum:
                maxSum = currSum
                leftIdx = windowStart
                rightIdx = windowEnd
            if currSum < 0:
                currSum = 0
                windowStart = windowEnd + 1
        print(nums[leftIdx : rightIdx + 1])
        return maxSum
        
