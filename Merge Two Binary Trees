# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        """
        Idea is to do preorder traversal
        if both root is None
            return None
        if root1 is None:
            then return root2
        if root2 is None
            return root 1
        else means both are not None so
        add root2 val in root1 and return root1
        tc = O(max(n,m))
        sc = O(max(n,m))
        
        This will be done in-place no extraa space for new tree
        """
        if root1 is None and root2 is None:
            return None
        if root1 is None:
            return root2
        if root2 is None:
            return root1
        root1.val += root2.val
        root1.left = self.mergeTrees(root1.left,root2.left)
        root1.right = self.mergeTrees(root1.right,root2.right)
        return root1
