# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        """
        recursive is also very simple
        tc = O(n + m)
        sc = O(max(n,m))
        """
        def recursiveCore(head1,head2):
            if head1 is None:
                return head2
            if head2 is None:
                return head1
            if head1.val < head2.val:
                head1.next = recursiveCore(head1.next,head2)
                return head1
            else:
                head2.next = recursiveCore(head1,head2.next)
                return head2
            
        ans = recursiveCore(list1,list2)
        return ans
    
    def iterative(self,list1,list2):
        """
        brute force is very simple create new list with help of two pointers
        
        better we can do with two pointers itself
        but we have to do it inplace
        
        basically we will have 3 ptrs
        smallPrev,small,large
        for eg in below lists
        1 3 5
        2 4 6
        smallPrev will be None
        small will be 1 and large will be 2
        
        steps as follows
        1.move small ptr untill it is lteq large along with following smallPrev
        2.attch smallPrev to larget
        3.swap small and large ptrs
        tc = O(n + m)
        sc = constant
        """
        def merge(small,smallPrev,large):
            while small and large:
                while small and small.val <= large.val:
                    smallPrev = small
                    small = small.next
                smallPrev.next = large
                small,large = large,small
        
        if list1 is None or list2 is None:
            return list1 if list1 else list2
        small,smallPrev,large = None,None,None
        if list1.val < list2.val:
            small = list1
            large = list2
        else:
            small = list2
            large = list1
        head = small
        merge(small,smallPrev,large)
        return head
   -------------------------------------------------------------7 March 2022
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if list1 is None or list2 is None:
            return list1 if list1 is not None else list2
        ptr1 = list1
        ptr2 = list2
        prev = None
        if ptr1.val > ptr2.val:
            ptr1,ptr2 = ptr2,ptr1
        newHead = ptr1
        
        while ptr1 is not None and ptr2 is not None:
            while ptr1 is not None and ptr1.val <= ptr2.val:
                prev = ptr1
                ptr1 = ptr1.next
            prev.next = ptr2
            ptr1,ptr2 = ptr2,ptr1
        return newHead
        
  ---------------------------------------------------------------------- 13 march 2022
  # Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @param B : head node of linked list
	# @return the head node in the linked list
	def mergeTwoLists(self, A, B):
        if A is None:
            return B
        if B is None:
            return A
        if B.val < A.val:
            return self.mergeTwoLists(B,A)
        p1 = A
        p2 = B
        prev = None
        while p1 and p2:
            while p1 and p1.val <= p2.val:
                prev = p1
                p1 = p1.next
            prev.next = p2
            p1,p2 = p2,p1
        return A

        
