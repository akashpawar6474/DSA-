# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        """
        idea is very simple push all the heads to minHeap
        take a loop untill minHeap is not empty
            pop the top min node
            add it to new list
            if it has next element
                then push that also into minHeap
        
        tc = O(klogk + nlogk) k = no of lists n = no of nodes in all lists
        sc = O(k) for minHeap
        """
        import heapq
        def pushAllHeads(minHeap,lists):
            for head in lists:
                if head is not None:
                    heapq.heappush(minHeap,(head.val,head))
                
        if lists is None:
            return []
        
        ListNode.__eq__ = lambda self,other : self.val == other.val
        ListNode.__lt__ = lambda self,other : self.val < other.val
        
        minHeap = []
        pushAllHeads(minHeap,lists)
        ansHead = None
        ansTail = None
        
        while minHeap:
            nodeVal,node = heapq.heappop(minHeap)
            if ansHead is None:
                ansHead = node
            else:
                ansTail.next = node
            ansTail = node
            if node.next is not None:
                heapq.heappush(minHeap,(node.next.val,node.next))
        
        return ansHead
  ------------------------------------------------------------------------ 17 March 2022
  class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        """
        tc = O(nlogk) => k = no o flists n = nod of nodes
        sc = constant if we ignore implicit stack
        """
        def mergeTwoSortedLists(p1,p2):
            if p1 is None:
                return p2
            if p2 is None:
                return p1
            if p1.val > p2.val:
                return mergeTwoSortedLists(p2,p1)
            p1prev = None
            newHead = p1
            while p1 and p2:
                while p1 and p1.val <= p2.val:
                    p1prev = p1
                    p1 = p1.next
                p1prev.next = p2
                p1,p2 = p2,p1
            return newHead
        
        if len(lists) == 0:
            return None
        if len(lists) < 2:
            return lists[0]
        start = 0
        end = len(lists)
        mid = (start + end) // 2
        left = self.mergeKLists(lists[:mid])
        right = self.mergeKLists(lists[mid:])
        return mergeTwoSortedLists(left,right)
    
  
