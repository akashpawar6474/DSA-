class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @param C : list of integers
	# @return an integer
	def solve(self, A, B, C):
        """
        A : [ 1, 4, 5, 8, 10 ]
        B : [ 6, 9, 15 ]
        C : [ 2, 3, 6, 6 ]

        by default take curr diff as math.inf
        p1  p2  p3  max     min     diff
        1   6   2   6       1       5

        now we can say that to minimize the diff
        we have to inc the min
        because as all array are sorted
        there is no point in increasing 6 or 2
        it will anyways maximize the difference

        p1  p2  p3  max     min     diff
        1   6   2   6       1       5
        4   6   2   6       2       4
        4   6   3   6       3       3
        4   6   6   6       4       2
        5   6   6   6       5       1
        8   6   6   8       6       1 dont change diff 
        8   9   6   9       8       1
        8   9   6   9       8       1
        now again we will inc p3 and we will be out of bound

        """
        import math
        p1,p2,p3 = 0,0,0
        aLen,bLen,cLen = len(A),len(B),len(C)
        minDiff = math.inf
        while p1 < aLen and p2 < bLen and p3 < cLen:
            maxAmongAll = max(A[p1],B[p2],C[p3])
            minAmongAll = min(A[p1],B[p2],C[p3])
            minDiff = min(minDiff,(abs(maxAmongAll - minAmongAll)))
            if A[p1] <= B[p2] and A[p1] <= C[p3]:
                p1 += 1
            elif B[p2] <= A[p1] and B[p2] <= C[p3]:
                p2 += 1
            elif C[p3] <= A[p1] and C[p3] <= B[p2]:
                p3 += 1
        return minDiff
