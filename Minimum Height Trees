class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:
        """
        it looks like construct graph first
        then for each node cal no of levels using bfs
        
        and keep track of root node for min level
        
        tc = O(n ^ 2) for each node we are visiting every other node
        sc = O(n)
        
        this also works but another idea is to cut down leaves level by level
        first imp thing is to cal indegrees for each node
        and collect all leaves into deque
        
        now take a loop untill totalNodes > 2
            reduce no of leaves from totalNodes
            and graze over leaves
                remove it one by one
                and for its all nei
                    reduce degree by 1 
                    if degree of nei gets to 1
                    then add it to leaves
                    
        some followup question like if we have only one node?
        tc = O(e + n + n) => O(e + n)
        sc = O(n)
        """
        from collections import deque
        if n == 1:
            return [0]
        
        #creating freq table for each node
        #having val indegree count 0
        inDegree = {i : 0 for i in range(n)}
        
        graph = [[] for i in range(n)]
        for x,y in edges:
            graph[x].append(y)
            graph[y].append(x)
            inDegree[x] += 1
            inDegree[y] += 1
        
        leaves = deque()
        for key,val in inDegree.items():
            if inDegree[key] == 1:
                leaves.append(key)
        
        totalNodes = n
        while totalNodes > 2:
            currNoOfLeaves = len(leaves)
            totalNodes -= currNoOfLeaves
            for i in range(len(leaves)):
                currNode = leaves.popleft()
                for nei in graph[currNode]:
                    inDegree[nei] -= 1
                    if inDegree[nei] == 1:
                        leaves.append(nei)
        return list(leaves)
                
