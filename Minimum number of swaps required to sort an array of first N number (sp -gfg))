Problem Description

Given an array of integers A of size N that is a permutation of [0, 1, 2, â€¦, (N-1)]. It is allowed to swap any two elements (not necessarily consecutive).

Find the minimum number of swaps required to sort the array in ascending order.



Problem Constraints

1 <= N <= 100000
0 <= A[i] < N



Input Format

The only argument given is the integer array A.



Output Format

Return the minimum number of swaps.



Example Input

Input 1:

A = [1, 2, 3, 4, 0]
Input 2:

A = [2, 0, 1, 3]


Example Output

Output 1:

4
Output 2:

2
------------------------------------------------------
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        """
        Another standard solution is very simple
        but it hard to come with this directly

        It is clearly mentioned that array contains
        elements in the range of 0 to n - 1

        if that is mentioned then definitely cyclic sort
        comes into the picture

        we have to count the cycles
        like if 0 is not at 0th idx
        1 on 1st idx or not

        and min swaps == no of cycles - 1
        [2,0,1,3]

        at first 3 indices we have 3 cycles
        and to sort this we need 2 swaps 
        which is cycle - 1

        tc= O(n)
        sc = constant 
        """
        n = len(A)
        cycleCount = 0
        currIdx = 0
        while currIdx < n:
            valAtCurrIdx = A[currIdx]
            if A[currIdx] != A[valAtCurrIdx]:
                cycleCount += 1
                A[valAtCurrIdx],A[currIdx] = A[currIdx],A[valAtCurrIdx]
            else:
                currIdx += 1
        return cycleCount

    def selectionSort(self,A):
        """
        we can do it using bubble sort
        if asked about consecutie swaps

        but that also take polynomial time

        Q.how can I do that?
        prefix sum => it will always be increasing in this case as all ele gt 0
        stack and queue => nothing like LIFO or FILO needed here
        sorting => sorting wont give us no of swaps
        searching => we dont have to find anything from array

        yeah selection sort will give at max O(n) min no of swaps

        tc = O(n ^ 2)
        sc = O(1)
        """
        n = len(A)
        count = 0
        for currIdx in range(n):
            minIdx = currIdx
            for i in range(currIdx + 1,n):
                if A[i] < A[minIdx]:
                    minIdx = i
            if minIdx != currIdx:
                count += 1
                A[minIdx],A[currIdx] = A[currIdx],A[minIdx]
        return count
