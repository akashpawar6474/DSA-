class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        
        this is very good problem
        before starting code we should make some observations
        
        take a random no
        12324      so graph is like
                                                    .   
                                            .
                                        .       .   
                                    .                   .
                                    1   2   3   2   4   1
                                        <... 10^2 10^1 10^0
        to get next permutation we need to swap the last peak
        
       algorithm is as follows
       graze over array from last to first
            and see if any element is less than next eleemtn
            we need point like this
                        .
                    .   
                breaking point
        then again graze over array from last to breaking point
        and find the element greater than breaking point
            then swap them
            
        then from next idx of breaking point to last of array reverse the numbers
        tc = O(n)
        sc = constant
        """ 
        def reverse(st,end):
            while st < end:
                nums[st],nums[end] = nums[end],nums[st]
                st += 1
                end -= 1
        
        breakingPoint = -1
        for i in range(len(nums) - 2,-1,-1):
            if nums[i] < nums[i + 1]:
                breakingPoint = i
                break
        
        if breakingPoint == -1:
            #means slope is decreasing only 4 3 2 1
            reverse(0,len(nums) - 1)
            
        else:  
            noGreaterThanBreakingPoint = -1
            for i in range(len(nums) - 1,breakingPoint,-1):
                if nums[i] > nums[breakingPoint]:
                    noGreaterThanBreakingPoint = i
                    break

            nums[breakingPoint],nums[noGreaterThanBreakingPoint] = nums[noGreaterThanBreakingPoint],nums[breakingPoint]
        
            reverse(breakingPoint + 1,len(nums) - 1)
--------------------------------------------------------------------------------------------------
tried on 22-12-2021
-------------------------------------------------------------------------------------------------
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        
        1 2 4 3 2
                4
                    3
            2           2
        1
               |
               |
              this is increasing slope from last of array
        3 is gt ele than breaking point from back of array
        now swap them
        
                4
            3   
                    2   2
        1   
        now 13|422
        now rev from next idx of breaking point to end of array
        13224
        
        tc = O(n + n) => O(n)
        sc = constant
        
        QQQQ.what is intuition behind this and why it works??
        """
        def reverse(start,end,nums):
            while start < end:
                nums[start],nums[end] = nums[end],nums[start]
                start += 1
                end -= 1
        
        bp = -1
        n = len(nums)
        for currIdx in range(n - 2,-1,-1):
            if nums[currIdx] < nums[currIdx + 1]:
                bp = currIdx
                break
        #if bp == -1 then we can say that array is sorted in descending
        #order so just reverse the array
        if bp == -1:
            reverse(0,n - 1,nums)
        else:
            #find the idx which has greate value than bp
            idxOfNoGtBp = -1
            for currIdx in range(n - 1,bp,-1):
                if nums[currIdx] > nums[bp]:
                    idxOfNoGtBp = currIdx
                    break
            nums[idxOfNoGtBp],nums[bp] = nums[bp],nums[idxOfNoGtBp]
            #now reverse from range of bp + 1 to end
            reverse(bp + 1,n - 1,nums)
            
     --------------------------------------------------------------------------------- 4 april 2022
     class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        first find the breaking point from last
        then find then greter ele than breaking point
        and replace them then reverse
        
        TC = O(N)
        SC = O(1)
        """
        def reverse(nums,start,end):
            while start < end:
                nums[start],nums[end] = nums[end],nums[start]
                start += 1
                end -= 1
            
        def findBreakingPoint(nums):
            n = len(nums)
            for currIdx in range(n - 2,-1,-1):
                if nums[currIdx] < nums[currIdx + 1]:
                    return currIdx
            return -1
        
        def getEleGtBreakingPoint(nums,bpIdx):
            n = len(nums)
            for currIdx in range(n - 1,bpIdx,-1):
                if nums[currIdx] > nums[bpIdx]:
                    return currIdx
            return -1
        
        #STEP 1
        breakingPoint = findBreakingPoint(nums)
        
        if breakingPoint == -1: #STEP 1 (EDGE CASE) IF ARR IS ALREADY REVERSE
            reverse(nums,0,len(nums) - 1)
        else:
            #STEP 2
            eleGTBreakingPoint = getEleGtBreakingPoint(nums,breakingPoint)
            #STEP 3
            nums[breakingPoint],nums[eleGTBreakingPoint] = nums[eleGTBreakingPoint],nums[breakingPoint]
            #STEP 4
            reverse(nums,breakingPoint + 1,len(nums) - 1)
            
        
