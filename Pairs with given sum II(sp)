Problem Description

Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.

Since the number of such pairs can be very large, return number of such pairs modulo (109 + 7).



Problem Constraints

1 <= |A| <= 100000

1 <= A[i] <= 10^9

1 <= B <= 10^9



Input Format

The first argument given is the integer array A.

The second argument given is integer B.



Output Format

Return the number of pairs for which sum is equal to B modulo (10^9+7).



Example Input

Input 1:

A = [1, 1, 1]
B = 2
Input 2:

 
A = [1, 1]
B = 2


Example Output

Output 1:

 3
Output 2:

 1


Example Explanation

Explanation 1:

 Any two pairs sum up to 2.
Explanation 2:

 only pair (1, 2) sums up to 2.
 --------------------------------------
 class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        """
        this is hashmap problems
        idea is to create frequecy table first

        then for each number 
            check if target - curr no is in hashtable
            if it is there then add frequency

            edge case if target - curr no is equeal to curr no
            means it is considering arr[i],arr[i] as a pair

            so deduct by 1

        at last return totalcount // 2 as we counted each pair twice

        [1 1 1 1]
        B = 2

        1 = 4

        for 0th idx
            counter = 4 means 4 pairs
            and here it is making pair with itself to so reduce by 1
        for 1st idx 
            couter = 7
            here it is makin pair with itself
         0 1 2 3 4 5 6 7 8 9 10 11
        [1 2 3 3 5 5 5 5 7 7 8 11] B = 10
        low             high => (0,7)
                     h       => (0,6)
            l                => (1,6)
              l    h         => (2,5)
                 l     h

        so idea is to having two pointers
        if arr[left] + arr[right] == B:
            then if arr[left]  == arr[right]
                means 5 in above case
                then count no of ele in that window
                and pairs = k * (k - 1) // 2
            else
                like we have 3 and 7
                so count instances of left value
                and instances of right value
                and multiply those instances and add to answer
        elif arr[left] + arr[right] < B:
            left+= 1
        else:
            right -= 1

        tc = O(n)
        sc = O(1)

        [ 1, 2, 6, 6, 7, 9, 9 ] B = 13
          l                 h
             l 
                l 
                          h 
                      h

        """
        n = len(A)
        left = 0
        right = n - 1
        ans = 0
        mod = 10 ** 9 + 7
        while left < right:
            if A[left] + A[right] == B:
                if A[left] == A[right]:
                    instancesOfSameNumber = right - left + 1
                    ans += ((instancesOfSameNumber * (instancesOfSameNumber - 1)) // 2)
                    ans = ans % mod
                    left = right + 1
                    right = left - 1
                elif A[left] != A[right]:
                    leftNumberInstances = 1
                    while left < right and A[left] == A[left + 1]:
                        left += 1
                        leftNumberInstances += 1
                    left += 1
                    rightNumberInstances = 1
                    while left < right and A[right] == A[right - 1]:
                        right -= 1
                        rightNumberInstances += 1
                    right -= 1
                    ans += (leftNumberInstances * rightNumberInstances) % mod
            elif A[left] + A[right] < B:
                left += 1
            else:
                right -= 1
        return ans % mod


    def firstTry(self,A,B):
        """
        as array is sorted
        [1, 1, 1]
        if we keep two pointer at both ends
        then how to decide which to move

        if we keep at 0th and 1st idx
        but will that logic work for other problems
        nope

        we will try brute force
        what is use where array is sorted

         [1, 1, 1]
        B = 2

          1 = 3


          [1 2 4 5]
           B = 6

           1 = 1
           2 = 1
           4 = 1
           5 = 1

        a + b = c
        a = c - b
        """
        n = len(A)
        mod = 10 ** 9 + 7
        ans = 0
        for i in range(n):
            for j in range(i + 1,n):
                if A[i] + A[j] == B:
                    ans = (ans + 1) % mod
        return ans
