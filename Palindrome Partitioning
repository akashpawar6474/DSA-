class Solution:
    def partition(self, s: str) -> List[List[str]]:
        """
        Idea is very simple
        we will try every substring
        and will check if curr substring is palindrome
            then add it to curr list
            and recur 
        base case if we reached end then
            add curr list of palindromes to ans list
            
        we can draw recursion tree for first string
                                            fn(0,3,[])
                            /                   |           \
                         0,1                  0,2           0,3
                         a                     aa           aab
        isPalindrome     Y                      Y            N
                        fn(1,3,[a])         fn(2,3,[aa])    stop
                    /              \            |
                   1,2            1,3           2,3
                   a               ab           b
    isPalindrome   Y                N           Y
                  fn(2,3,[a,a])     stop      fn(3,3,[aa,b])
                    |                          edge case
                    2,3
                    b
                    Y
                fn(3,3,[a,a,b])
                edge case st == end
                so add curr list
                to ans list
        tc = O(n * 2 ^ n)
        sc = O(n * 2 ^ n)
        """
        def backtrack(st,end,s,currList,ans):
            if st == end:
                ans.append(currList.copy())
                return
            for i in range(st,end):
                currSubstring = s[st:i + 1]
                if currSubstring == currSubstring[::-1]:
                    currList.append(currSubstring)
                    backtrack(i + 1,end,s,currList,ans)
                    currList.pop()
        st = 0
        end = len(s)
        currList = []
        ans = []
        backtrack(st,end,s,currList,ans)
        return ans
        
                    
