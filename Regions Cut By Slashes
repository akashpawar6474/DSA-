class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        """
        this part involves preprocessing
        we need to upscale our grid to 3 times
        means one cell is represented by 3rows and 3 cols
        once we do that is is just problem to find the no of islands
        Q.why only 3 * 3 why not 2 * 2
        => here is the reason with example
        If we use a scale of two, the up/down/left/right part of the DFS algorithm does not work. For               example, given ["//", "/ "], the corresponding graph would be something like:
        [ ][/][ ][/]
        [/][ ][/][ ]
        [ ][/][ ][ ]
        [/][ ][ ][ ]
        If we used a scale of size 2 here, the answer would be 5, when it should be 3. Why you may ask? It's        because the diagonal in the middle cannot locate the diagonals next to it because we search only top,       right, bottom, and left. Thus reinforcing the OPs answer saying that the lines are too thick to                identify empty areas correctly.

        However, if we would scale this to a factor of 3, we get:
    [ ][ ][/][ ][ ][/]
    [ ][/][ ][ ][/][ ]
    [/][ ][ ][/][ ][ ]
    [ ][ ][/][ ][ ][ ]
    [ ][/][ ][ ][ ][ ]
    [/][ ][ ][ ][ ][ ]
    In this example, the middle diagonal now has enough room to search for other diagonal using just 4              directions and the following result would be 3.
    tc = O(n * m)
        """
        def dfs(i,j,upScaledGrid):
            upScaledGrid[i][j] = 1
            for x,y in [(i + 1,j),(i - 1,j),(i,j + 1),(i,j - 1)]:
                if 0 <= x < len(upScaledGrid) and 0 <= y < len(upScaledGrid[0]) and upScaledGrid[x][y] == 0:
                    dfs(x,y,upScaledGrid)
            
        upScaledGrid = [[0 for y in range(len(grid[0] * 3))] for x in range(len(grid) * 3)]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '/':
                    upScaledGrid[i * 3][j * 3 + 2] = 1
                    upScaledGrid[i * 3 + 1][j * 3 + 1] = 1
                    upScaledGrid[i * 3 + 2][j * 3] = 1
                elif grid[i][j] == '\\':
                    upScaledGrid[i * 3][j * 3] = 1
                    upScaledGrid[i * 3 + 1][j * 3 + 1] = 1
                    upScaledGrid[i * 3 + 2][j * 3 + 2] = 1
                    
        print(upScaledGrid)
        cnt = 0
        for i in range(len(upScaledGrid)):
            for j in range(len(upScaledGrid[0])):
                if upScaledGrid[i][j] == 0:
                    dfs(i,j,upScaledGrid)
                    cnt += 1
        return cnt
