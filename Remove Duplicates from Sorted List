# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        """
        tc = O(n)
        sc = O(n) can cause stack overflow
        """
        if head is None or head.next is None:
            return head
        head.next = self.deleteDuplicates(head.next)
        return head.next if head.val == head.next.val else head
    
    def iterative(self,head):
        """
        tc = O(n)
        sc = constant
        """
        if head is None or head.next is None:
            return head
        prev = head
        curr = head.next
        while curr:
            while curr and curr.val == prev.val:
                curr = curr.next
            prev.next = curr
            prev = curr
            curr = curr.next if curr else None
        return head
