# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        """
        if head is None
            return none
        if head has target val
            recur for remaining string
            and return
        else:
            recur for remaining string
            attach to head.next
            then return
        tc = O(n)
        sc = O(n)
        """
        def remove(head,val):
            if head is None:
                return head
            if head.val == val:
                return remove(head.next,val)
            else:
                head.next = remove(head.next,val)
                return head
        return remove(head,val)
    
    def iterative(self,head,val):
        """
        we will need curr and prev
        if curr has target val
            if prev is None:
                then move head by 1
            else
                then attach prev to next to curr
            prev = curr
        move curr ahead
        tc= O(n)
        sc = constant
        """
        if head is None:
            return head
        dummyHead = ListNode(-1)
        dummyHead.next = head
        curr = dummyHead
        
        while curr.next is not None:
            if curr.next.val == val:
                curr.next = curr.next.next
            else:
                curr = curr.next
        return dummyHead.next
