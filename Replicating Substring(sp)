Problem Description

Given a string B, find if it is possible to re-order the characters of the string B so that it can be represented as a concatenation of A similar strings.

Eg: B = aabb and A = 2, then it is possible to re-arrange the string as "abab" which is a concatenation of 2 similar strings "ab".

If it is possible, return 1, else return -1.



Problem Constraints

1 <= Length of string B <= 1000

1 <= A <= 1000

All the alphabets of S are lower case (a - z)



Input Format

First argument is an integer A.
Second argument is a string B.



Output Format

Your function should return 1 if it is possible to re-arrange the characters of the string B so that it can be represented as a concatenation of A similar strings. If it is not, return -1.



Example Input

Input 1:

 A = 2
 B = "bbaabb"
Input 2:

 A = 1
 B = "bc"


Example Output

Output 1:

 1
Output 2:

 1


Example Explanation

Explanation 1:

 We can re-order the given string into "abbabb".
Explanation 2:

 String "bc" is already arranged.
 -----------------------------------------------
 class Solution:
    # @param A : integer
    # @param B : string
    # @return an integer
    def solve(self, A, B):
        """
        A = 3
        bbaabbcc

        if A  = 1
        then whole word can be single word no need to rearrange
        so just return 1
        Idea is to count the frequeny of characters
        then for each freq check if it is 1
        then all char should have freq is multiple of no

        means each instance of char should come inside one word
        """
        def prepareFreqMap(st):
            ht = {}
            for ch in st:
                if ch not in ht:
                    ht[ch] = 0
                ht[ch] += 1
            return ht

        if A == 1:
            return 1
        ht = prepareFreqMap(B)
        for key,val in ht.items():
            if val % A != 0:
                return -1
        return 1
