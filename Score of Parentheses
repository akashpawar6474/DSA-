class Solution:
    def scoreOfParentheses(self, s: str) -> int:
        """
        Idea is very simple
        take start ptr and loop untill it doesnt reach end
        and add amount for each clubbed parenthesis
        tc = O(n)
        s = O(n) implicit stack
        """
        def recur(s,start):
            if s[start] == '(' and s[start + 1] == ')':
                return 1,start + 2
            next = start + 1
            currTotal = 0
            while s[next] != ')':
                remainingTotal,next = recur(s,next)
                currTotal += remainingTotal
            return 2 * currTotal,next + 1
                
            
        n = len(s)
        start = 0
        total = 0
        while start < n:
            currAmount,start = recur(s,start)
            total += currAmount
        return total
    
    def firstTry(self,s):
        """
        This is clear cut stack problem
        """
        st = []
        count = 0
        for ch in s:
            if ch == '(':
                st.append(ch)
        
        print(st)
        return len(st)
