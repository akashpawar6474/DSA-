class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        """
        WHOLE MATRIX IS SORTED -- THIS IS REALLY USEFUL OBSERVATION
        
        First Approach => brute force is to do linear search tc = O(n * m) sc = constant
        
        Second Approach => if we take a look each row is sorted
        so we can apply BS on each row
        tc = O(nlogm)
        sc = constant
        
        Third approach => take curr ptr at top right corner
                          if target is greater than currPtr
                            then move it down
                          else means target is less than currPtr
                            then move it to left
        tc = O(n + m)
        sc = constant
        
        Fourth Approach => this will need some understanding
        of how 2d matrix can be visually represented as 1d array
        
        for eg 2d array as follows
        1 2 => (0,0) (0,1)
        3 4    (1,0) (1,1)
        
        the same 1d array can be
        1 2 3 4 => 0 1 2 3
        
        Q.so question is how to convert idx of 1d array to co-ordinates of 2d array
        => first of all determin row and col of matrix
        rows = 2 cols = 2
        and we have to convert 2nd idx to co-ordinates of above 2d array
        assume here mid is 2
        then row = mid // col => 2 // 2 => 1
             col = mid % col => 2 % 2 => 0
             
        now assume mid is 3rd idx
        then row = mid // col => 3 // 2 => 1
             col = mid % col =>  3 % 2 => 1
             
        so we can use the same logic to to deal with curr idx to co-ordinates
        our default values will be 
        start will be 0
        end will be rows * cols - 1
        tc = O(log(n * m))
        sc = constant
        """
        rows = len(matrix)
        cols = len(matrix[0])
        start = 0
        end = rows * cols - 1
        isPresent = False
        while start <= end:
            mid = (start + end) // 2
            rowIdx = mid // cols
            colIdx = mid % cols
            if matrix[rowIdx][colIdx] == target:
                isPresent = True
                break
            if matrix[rowIdx][colIdx] < target:
                start = mid + 1
            else:
                end = mid - 1
        return isPresent
