Given an array of integers, every element appears thrice except for one which occurs once.

Find that element which does not appear thrice.

NOTE: Your algorithm should have a linear runtime complexity.

Could you implement it without using extra memory?




Problem Constraints

2 <= A <= 5*106

0 <= A <= INTMAX
--------------------------------------------
class Solution:
	# @param A : tuple of integers
	# @return an integer
	def singleNumber(self, A):
		"""
		idea is very simple 
		generate binary of each no
		 A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1]
		 
		 1 = 0 0 1
		 2 = 0 1 0
		 4 = 1 0 0
		 3 = 0 1 1
		 3 = 0 1 1
		 2 = 0 1 0
		 2 = 0 1 0
		 3 = 0 1 1
		 1 = 0 0 1
		 1 = 0 0 1
	------------------ now count no of set bits for each bit position
			 1 6 6

		if at any bit position no of set bits are multiple of 3 means this bit
		position is not set for unique no

		and vice versa where if at any bit position no of set bits are not multiple 
		means having remainder 1 means this bit is set for unique no

		so Idea is to graze over all bit positions
			for each bit position graze over array
				count no of set bits for this bit position
			if cnt % 3 == 1
				means this bit is set in unique no so do that

		how to set bit in any no?
		000 => now how to set bit at 2nd position to get => 100
		just do no or (1 << 2) OR no + (2 ** 2)

		graze from 0 to 30th bit because last bit is signed

		tc = O(32 * n)
		sc = constant
		"""
		def isBitSet(no,bitPosition):
			"""
			111
			now check if 2nd bit is set or not
			100
			111 & 100 = 100 so it is not equal to 0
			"""
			if no & (1 << bitPosition) != 0:
				return True
			return False

		ans = 0
		n = len(A)
		for i in range(31):
			setBitsCount = 0
			for j in range(n):
				if isBitSet(A[j],i):
					setBitsCount += 1
			if setBitsCount % 3 == 1:
				ans = ans + (2 ** i)
				#ans = ans | (1 << i)
		return ans
