from collections import deque
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        """
        brute force is to run two loops 
        and in between that find max by grazing over k distance
        tc = O(n * k)
        sc = constant
        
        But we can make use of DeQueue here
        we will insert curr ele into queue untill queue len < k
        then we will popleft out of bound char
        then pop right all ele which are less than curr ele
        and at each running window take front ele of queue as maximum
        tc = O(n)
        sc = O(k)
        """
        q = deque()
        n = len(nums)
        ans = []
        for currIdx in range(n):
            currEle = nums[currIdx]
            if q and q[0] == currIdx - k:
                q.popleft()
            while q and nums[q[-1]] <= currEle:
                q.pop()
            q.append(currIdx)
            if currIdx >= k - 1:
                ans.append(nums[q[0]])
        return ans
------------------------------------------------------------------27 march 2022
class Solution:
	# @param A : tuple of integers
	# @param B : integer
	# @return a list of integers
	def slidingMaximum(self, A, B):
		from collections import deque
		q = deque()
		n = len(A)
		if B > len(A):
			return max(A)
		ans = []
		for currIdx in range(n):
			if len(q) > 0 and q[0] == currIdx - B:
				q.popleft()
			while len(q) > 0 and A[q[-1]] < A[currIdx]:
				q.pop()
			q.append(currIdx)
			if currIdx >= B - 1:
				ans.append(A[q[0]])
		return ans
