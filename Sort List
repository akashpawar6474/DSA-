# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        def getCenterNode(head):
            slow = head 
            fast = head.next
            while fast and fast.next:
                slow = slow.next
                fast = fast.next.next
            return slow
        
        def mergeTwoLists(left, right):
            if left is None:
                return right
            if right is None:
                return left
            if right.val < left.val:
                return mergeTwoLists(right,left)
            p1 = left
            p2 = right
            prev = None
            while p1 and p2:
                while p1 and p1.val <= p2.val:
                    prev = p1
                    p1 = p1.next
                prev.next = p2
                p1,p2 = p2,p1
            return left
        
        if head is None or head.next is None:
            return head
        mid = getCenterNode(head)
        secondListHead = mid.next
        mid.next = None
        left = self.sortList(head)
        right = self.sortList(secondListHead)
        return mergeTwoLists(left,right)
    
    





        
