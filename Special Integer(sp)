Problem Description

Given an array of integers A and an integer B, find and return the maximum value K such that there is no subarray in A of size K with sum of elements greater than B.



Problem Constraints

1 <= |A| <= 100000
1 <= A[i] <= 10^9

1 <= B <= 10^9



Input Format

The first argument given is the integer array A.

The second argument given is integer B.



Output Format

Return the maximum value of K (sub array length).



Example Input

Input 1:

A = [1, 2, 3, 4, 5]
B = 10
Input 2:

A = [5, 17, 100, 11]
B = 130


Example Output

Output 1:

 2
Output 2:

 3


Example Explanation

Explanation 1:

Constraints are satisfied for maximal value of 2.
Explanation 2:

Constraints are satisfied for maximal value of 3.
----------------------------------------------------
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        """
        first of all we need to create fun 
        which takes two parameters arr and k
        and we need to return first if k size 
        subarray has sum gt B

        now question is how to check that
        1 2 3 4 5
        if k = 2

        first calculate sum of k elements
        
        tc = O(nlogn)
        sc = O(1)
        """
        def isKLenSubarrayGTB(arr,k,B):
            #first visit k elements
            currSum = 0
            arrLen = len(arr)
            for windowEnd in range(k):
                currSum += arr[windowEnd]
            #print(currSum,k)
            if currSum > B:
                return False
            windowStart = 0
            for windowEnd in range(k,arrLen):
                #print(windowEnd)
                currSum += arr[windowEnd]
                currSum -= arr[windowStart]
                windowStart += 1
                #print(currSum,arr[windowEnd],arr[windowStart],k)
                if currSum > B:
                    #print(windowEnd,currSum)
                    return False
            return True
        
        start = 1
        end = len(A)
        ans = 0
        while start <= end:
            mid = (start + end) // 2
            if isKLenSubarrayGTB(A,mid,B):
                ans = mid
                start = mid + 1
            else:
                end = mid - 1
        return ans

                
