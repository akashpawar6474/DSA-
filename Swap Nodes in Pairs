# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        """
        we can use recursion here
        if root is None
            return None
        if root.next is None 
            then also return None
        
        if we have two nodes
        
            N1  ->  N2  -> None
        
        1.cache next node no 2
        2.connect next of node2 to node1
        3.cache node2 as newHead
        4.recur next of node2 and attach to node1
            
        tc = O(n)
        sc = O(n)
        """
        if head is None or head.next is None:
            return head
        headOfRemainingList = head.next.next
        newHead = head.next
        head.next.next = head
        head.next = self.swapPairs(headOfRemainingList)
        return newHead
---------------------------------------------------------------------- 16 march 2022
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        """
        so use same approach of reversing k group nodes
        here by default k is 2
        """
        def getSize(head):
            curr = head
            count = 0
            while curr:
                count += 1
                curr = curr.next
            return count
        
        size = getSize(head)
        if size < 2:
            return head
        newHead = None
        prev = None
        curr = head
        tailOne = None
        tailTwo = head
        while size >= 2:
            for i in range(2):
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
            if newHead is None:
                newHead = prev
            elif tailOne is not None:
                tailOne.next = prev
            tailOne = tailTwo
            tailTwo.next = curr
            tailTwo = curr
            prev = None
            size -= 2
        return newHead

    def recursive(self,head):
        """
        it gives stack overflow if node size is big
        """
        if head is None or head.next is None:
            return head
        reversedListHead = self.swapPairs(head.next.next)
        newHead = head.next
        head.next.next = head
        head.next = reversedListHead
        return newHead
