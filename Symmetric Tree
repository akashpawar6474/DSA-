# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        """
        How recursion with two nodes solves this problem?
        tc = O(n)
        sc = O(n)
        """
        def isSymmetricCore(root1,root2):
            if root1 is None and root2 is None:
                return True
            if root1 and root2 and root1.val == root2.val:
                return isSymmetricCore(root1.left,root2.right) and isSymmetricCore(root1.right,root2.left)
            else:
                return False
            
        if root is None:
            return True
        return isSymmetricCore(root.left,root.right)
-------------------------------------------------------------------------- 2 april 2022
	def isSymmetric(self, A):
        def validate(left,right):
            if left is None and right is None:
                return True
            if left and right and left.val == right.val:
                return validate(left.left,right.right) and validate(left.right,right.left)
            else:
                return False

        if A is None or (A.left is None and A.right is None):
            return 1
        return 1 if validate(A.left,A.right) else 0
