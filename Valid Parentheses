class Solution:
    def isValid(self, s: str) -> bool:
        """
        Idea is simple to 
        use map and stack to keep track 
        of opening brackets
        """
        ht = {}
        ht[')'] = '('
        ht[']'] = '['
        ht['}'] = '{'
        
        stack = []
        n = len(s)
        for currIdx in range(n):
            currCh = s[currIdx]
            if currCh in ht:
                if not stack or ht[currCh] != stack.pop():
                    return False
            else:
                stack.append(currCh)

        return len(stack) == 0
--------------------------------------------------------------------14 Jan 2022
class Solution:
    def isValid(self, s: str) -> bool:
        """
        idea is very simple if we have opening bracket
        push it into the stack
        else pop from stack if doesnt match break and return false
        
        all all closing bracket and opening bracket pairs to hashtable
        tc= O(n)
        sc = constant
        """
        ht = {}
        ht[')'] = '('
        ht['}'] = '{'
        ht[']'] = '['
        st = []
        for ch in s:
            if ch in ht:
                if not st:
                    return False
                else:
                    top = st.pop()
                    if top != ht[ch]:
                        return False
            else:
                st.append(ch)
        return len(st) == 0
------------------------------------------------------------------------------13 march 2022
class Solution:
    def isValid(self, s: str) -> bool:
        st = []
        ht = {}
        ht[')'] = '('
        ht[']'] = '['
        ht['}'] = '{'
        for ch in s:
            if ch not in ht:
                st.append(ch)
            elif len(st) > 0:
                top = st.pop()
                if top != ht[ch]:
                    return False
            else:
                return False
        return len(st) == 0
                
