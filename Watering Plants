class Solution:
    def wateringPlants(self, plants: List[int], capacity: int) -> int:
        """
        description is very long but problem is very simple
        if we boil down this to simple simulation 
        
        some observations
            at each step if we have more than curr need
                then inc count by 1
                reduce the capcity
            
            at any step if we have less than curr need
                then we have to go back and come again
                for eg at 2nd idx we have more curr need
                then we need to go back 1 and 0
                then come again 0 and 1
                so we can refilled with full capacity
                now we can override curr need
                
                so at any step if face this situation
                no of extraa steps to refill is 2 * i
                
        tc = O(n)
        sc = (1)
        """
        steps = 0
        currCapacity = capacity
        for i in range(len(plants)):
            if plants[i] > currCapacity:
                steps += 2 * i
                currCapacity = capacity
            steps += 1
            currCapacity -= plants[i]
        return steps
