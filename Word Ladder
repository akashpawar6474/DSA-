class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        """
        so we can use BFS here
        first of all create set of words to do constant time retrival and deletion
        
        then take string with all lowercase characters
        "abcdefghijklmnopqurstuvwxyz"
        
                            hit
                    /       |       \
                 26it       h26t    hi26
                            |
                            hot push hot into queue
                    /       |       \
                26ot        h26t    ho26
                 |
                dot
            /   |   \
          26ot d26t  do26
                        | here we get our target word
                        
        edge case is after converting wordlist to set
        if endword is not present in wordlist
            then return 0
        
        for i in range(len(beginWord)):
            for currChar in "abcdefghijklmnopqurstuvwxyz":
                print(beginWord[:i],' ',currChar,beginWord[i + 1:])
                
        tc = O(n + 26 * m * m) => n = no of words m = no of char in words list
        in worst case we are visiting all the words and for each word we are grazing over it and again we are doing slicing on it
        sc = O(m)
        """
        from collections import deque
        wordSet = set(wordList)
        if endWord not in wordSet:
            return 0
        q = deque()
        q.append(beginWord)
        currLevel = 1
        alphabets = "abcdefghijklmnopqrstuvwxyz"
        
        while q:
            size = len(q)
            for i in range(size):
                currWord = q.popleft()
                if currWord == endWord:
                    return currLevel
                lenCurrWord = len(currWord)
                for i in range(lenCurrWord):
                    for ch in alphabets:
                        newWord = currWord[:i] + ch + currWord[i + 1:]
                        if newWord in wordSet:
                            q.append(newWord)
                            wordSet.remove(newWord)
            currLevel += 1
        return 0
                
        

    def dpTry(self,beginWord,endWord,wordList):
        """
        beginWord = hit
        endword = cog
        
        hit => hot => dot => lot => log => cog
        
        Now question is how to check if b has one diff letter than a?
        can we use freq table here
        hit
        h = 1
        i = 1
        t = 1
        
        hot 
        h = 0
        o = 1
        t = 0
        
        means if curr word in list has only one entry in map
        with val as 1 
        then consider that and recur
        and keep track with min Value
        
        what all things we need?
        initialize currword map with freq map of beginWord
        
        Assumption => fn takes beginWord,endword,wordList
                     return shortest transformation sequence length
                     
        Main Logic => create freq map of begin word
                      take shortest transformation sequnce = math.inf
                      graze over word list
                        create map for each word
                            and if map has only one letter with val 1
                                add 1 + fn(curr word in list as beginword,endword,wordlist)
                                keep track with shortest distance
        Edge case => if begin word == end word return 1
        
        what all parameters are changing in fn
        beginword and endword
        
        so take map for it for remembering subproblems
        
        but this map logic will fail for
        begin word = hit and currword = hto
        
        here two words are transformed
        but using map we still remain with one entry and we recur for hto
        which is not valid
        
        so we will count no of diff char in curr word
        if diff count == 1
        then only recur
        
                            fn(hit,dom)
                                |
                            fn(hot,dom)
                                |
                            fn(dot,dom)
                                |
                            fn(dom,dom)
        """
        import math
        def createNormalMap(word):
            ht = {}
            for ch in word:
                if ch not in ht:
                    ht[ch] = 0
                ht[ch] += 1
            return ht
        
        def createInvMap(prevWordMap,currWord):
            for ch in currWord:
                if ch in prevWordMap:
                    prevWordMap[ch] -= 1
                    if prevWordMap[ch] == 0:
                        del prevWordMap[ch]
            return prevWordMap
        
        def getDiffChCount(source,target):
            n = len(source)
            count = 0
            for i in range(n):
                if source[i] != target[i]:
                    count += 1
            return count
        """
        hit mom
hot mom
dot mom
dom mom
tom mom
mom mom
        """
        def topDown(beginWord,endWord,wordSet):
            if beginWord == endWord:
                return 1
            shortestDistance = math.inf
            wordList = list(wordSet)
            for currWord in wordList:
                chDiffCount = getDiffChCount(beginWord,currWord)
                if chDiffCount == 1:
                    if len(wordSet) > 0:
                        wordSet.remove(currWord)
                    distanceFromCurrWord = 1 + topDown(currWord,endWord,wordSet)
                    shortestDistance = min(shortestDistance,distanceFromCurrWord)
                """
                currWordMap = createInvMap(beginWordMap.copy(),currWord)
                if len(currWordMap) == 1:
                    keys = currWordMap.keys()
                    keys = list(keys)
                    if currWordMap[keys[0]] == 1:
                        distanceFromCurrWord = 1 + topDown(currWord,endWord,wordList)
                        shortestDistance = min(shortestDistance,distanceFromCurrWord)
                """
            return shortestDistance
        
        wordSet = set(wordList)
        return topDown(beginWord,endWord,wordSet)
        
